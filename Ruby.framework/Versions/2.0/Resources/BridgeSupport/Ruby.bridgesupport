<?xml version='1.0'?>
<!DOCTYPE signatures SYSTEM "file://localhost/System/Library/DTDs/BridgeSupport.dtd">
<signatures version='1.0'>
<struct name='OnigCaptureTreeNode' type='{OnigCaptureTreeNodeStruct=&quot;group&quot;i&quot;beg&quot;i&quot;end&quot;i&quot;allocated&quot;i&quot;num_childs&quot;i&quot;childs&quot;^^{OnigCaptureTreeNodeStruct}}' type64='{OnigCaptureTreeNodeStruct=&quot;group&quot;i&quot;beg&quot;q&quot;end&quot;q&quot;allocated&quot;i&quot;num_childs&quot;i&quot;childs&quot;^^{OnigCaptureTreeNodeStruct}}'/>
<struct name='OnigCaptureTreeNodeStruct' type='{OnigCaptureTreeNodeStruct=&quot;group&quot;i&quot;beg&quot;i&quot;end&quot;i&quot;allocated&quot;i&quot;num_childs&quot;i&quot;childs&quot;^^{OnigCaptureTreeNodeStruct}}' type64='{OnigCaptureTreeNodeStruct=&quot;group&quot;i&quot;beg&quot;q&quot;end&quot;q&quot;allocated&quot;i&quot;num_childs&quot;i&quot;childs&quot;^^{OnigCaptureTreeNodeStruct}}'/>
<struct name='OnigCaseFoldCodeItem' type='{_OnigCaseFoldCodeItem=&quot;byte_len&quot;i&quot;code_len&quot;i&quot;code&quot;[3I]}'/>
<struct name='OnigCompileInfo' type='{_OnigCompileInfo=&quot;num_of_elements&quot;i&quot;pattern_enc&quot;^{OnigEncodingTypeST}&quot;target_enc&quot;^{OnigEncodingTypeST}&quot;syntax&quot;^{_OnigSyntaxType=&quot;op&quot;I&quot;op2&quot;I&quot;behavior&quot;I&quot;options&quot;I&quot;meta_char_table&quot;{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}}&quot;option&quot;I&quot;case_fold_flag&quot;I}'/>
<struct name='OnigEncodingType' type='{OnigEncodingTypeST=&quot;precise_mbc_enc_len&quot;^?&quot;name&quot;*&quot;max_enc_len&quot;i&quot;min_enc_len&quot;i&quot;is_mbc_newline&quot;^?&quot;mbc_to_code&quot;^?&quot;code_to_mbclen&quot;^?&quot;code_to_mbc&quot;^?&quot;mbc_case_fold&quot;^?&quot;apply_all_case_fold&quot;^?&quot;get_case_fold_codes_by_str&quot;^?&quot;property_name_to_ctype&quot;^?&quot;is_code_ctype&quot;^?&quot;get_ctype_code_range&quot;^?&quot;left_adjust_char_head&quot;^?&quot;is_allowed_reverse_match&quot;^?&quot;ruby_encoding_index&quot;i&quot;flags&quot;I}'/>
<struct name='OnigEncodingTypeST' type='{OnigEncodingTypeST=&quot;precise_mbc_enc_len&quot;^?&quot;name&quot;*&quot;max_enc_len&quot;i&quot;min_enc_len&quot;i&quot;is_mbc_newline&quot;^?&quot;mbc_to_code&quot;^?&quot;code_to_mbclen&quot;^?&quot;code_to_mbc&quot;^?&quot;mbc_case_fold&quot;^?&quot;apply_all_case_fold&quot;^?&quot;get_case_fold_codes_by_str&quot;^?&quot;property_name_to_ctype&quot;^?&quot;is_code_ctype&quot;^?&quot;get_ctype_code_range&quot;^?&quot;left_adjust_char_head&quot;^?&quot;is_allowed_reverse_match&quot;^?&quot;ruby_encoding_index&quot;i&quot;flags&quot;I}'/>
<struct name='OnigErrorInfo' type='{_OnigErrorInfo=&quot;enc&quot;^{OnigEncodingTypeST}&quot;par&quot;*&quot;par_end&quot;*}'/>
<struct name='OnigMetaCharTableType' type='{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}'/>
<struct name='OnigRegexType' type='{re_pattern_buffer=&quot;p&quot;*&quot;used&quot;I&quot;alloc&quot;I&quot;state&quot;i&quot;num_mem&quot;i&quot;num_repeat&quot;i&quot;num_null_check&quot;i&quot;num_comb_exp_check&quot;i&quot;num_call&quot;i&quot;capture_history&quot;I&quot;bt_mem_start&quot;I&quot;bt_mem_end&quot;I&quot;stack_pop_level&quot;i&quot;repeat_range_alloc&quot;i&quot;repeat_range&quot;^{_OnigRepeatRange=&quot;lower&quot;i&quot;upper&quot;i}&quot;enc&quot;^{OnigEncodingTypeST}&quot;options&quot;I&quot;syntax&quot;^{_OnigSyntaxType=&quot;op&quot;I&quot;op2&quot;I&quot;behavior&quot;I&quot;options&quot;I&quot;meta_char_table&quot;{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}}&quot;case_fold_flag&quot;I&quot;name_table&quot;^v&quot;optimize&quot;i&quot;threshold_len&quot;i&quot;anchor&quot;i&quot;anchor_dmin&quot;I&quot;anchor_dmax&quot;I&quot;sub_anchor&quot;i&quot;exact&quot;*&quot;exact_end&quot;*&quot;map&quot;[256C]&quot;int_map&quot;^i&quot;int_map_backward&quot;^i&quot;dmin&quot;I&quot;dmax&quot;I&quot;chain&quot;^{re_pattern_buffer}}' type64='{re_pattern_buffer=&quot;p&quot;*&quot;used&quot;I&quot;alloc&quot;I&quot;state&quot;i&quot;num_mem&quot;i&quot;num_repeat&quot;i&quot;num_null_check&quot;i&quot;num_comb_exp_check&quot;i&quot;num_call&quot;i&quot;capture_history&quot;I&quot;bt_mem_start&quot;I&quot;bt_mem_end&quot;I&quot;stack_pop_level&quot;i&quot;repeat_range_alloc&quot;i&quot;repeat_range&quot;^{_OnigRepeatRange=&quot;lower&quot;i&quot;upper&quot;i}&quot;enc&quot;^{OnigEncodingTypeST}&quot;options&quot;I&quot;syntax&quot;^{_OnigSyntaxType=&quot;op&quot;I&quot;op2&quot;I&quot;behavior&quot;I&quot;options&quot;I&quot;meta_char_table&quot;{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}}&quot;case_fold_flag&quot;I&quot;name_table&quot;^v&quot;optimize&quot;i&quot;threshold_len&quot;i&quot;anchor&quot;i&quot;anchor_dmin&quot;Q&quot;anchor_dmax&quot;Q&quot;sub_anchor&quot;i&quot;exact&quot;*&quot;exact_end&quot;*&quot;map&quot;[256C]&quot;int_map&quot;^i&quot;int_map_backward&quot;^i&quot;dmin&quot;Q&quot;dmax&quot;Q&quot;chain&quot;^{re_pattern_buffer}}'/>
<struct name='OnigRegion' type='{re_registers=&quot;allocated&quot;i&quot;num_regs&quot;i&quot;beg&quot;^i&quot;end&quot;^i&quot;history_root&quot;^{OnigCaptureTreeNodeStruct}}' type64='{re_registers=&quot;allocated&quot;i&quot;num_regs&quot;i&quot;beg&quot;^q&quot;end&quot;^q&quot;history_root&quot;^{OnigCaptureTreeNodeStruct}}'/>
<struct name='OnigRepeatRange' type='{_OnigRepeatRange=&quot;lower&quot;i&quot;upper&quot;i}'/>
<struct name='OnigSyntaxType' type='{_OnigSyntaxType=&quot;op&quot;I&quot;op2&quot;I&quot;behavior&quot;I&quot;options&quot;I&quot;meta_char_table&quot;{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}}'/>
<struct name='RArray' type='{RArray=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;as&quot;(?=&quot;heap&quot;{?=&quot;len&quot;l&quot;aux&quot;(?=&quot;capa&quot;l&quot;shared&quot;I)&quot;ptr&quot;^I}&quot;ary&quot;[3L])}' type64='{RArray=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;as&quot;(?=&quot;heap&quot;{?=&quot;len&quot;q&quot;aux&quot;(?=&quot;capa&quot;q&quot;shared&quot;Q)&quot;ptr&quot;^Q}&quot;ary&quot;[3Q])}'/>
<struct name='RBasic' type='{RBasic=&quot;flags&quot;I&quot;klass&quot;I}' type64='{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}'/>
<struct name='RBignum' type='{RBignum=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;as&quot;(?=&quot;heap&quot;{?=&quot;len&quot;l&quot;digits&quot;^I}&quot;ary&quot;[3I])}' type64='{RBignum=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;as&quot;(?=&quot;heap&quot;{?=&quot;len&quot;q&quot;digits&quot;^I}&quot;ary&quot;[6I])}'/>
<struct name='RClass' type='{RClass=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;ptr&quot;^{rb_classext_struct}&quot;m_tbl&quot;^{st_table}&quot;iv_index_tbl&quot;^{st_table}}' type64='{RClass=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;ptr&quot;^{rb_classext_struct}&quot;m_tbl&quot;^{st_table}&quot;iv_index_tbl&quot;^{st_table}}'/>
<struct name='RComplex' type='{RComplex=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;real&quot;I&quot;imag&quot;I}' type64='{RComplex=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;real&quot;Q&quot;imag&quot;Q}'/>
<struct name='RData' type='{RData=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;dmark&quot;^?&quot;dfree&quot;^?&quot;data&quot;^v}' type64='{RData=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;dmark&quot;^?&quot;dfree&quot;^?&quot;data&quot;^v}'/>
<struct name='RFile' type='{RFile=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;fptr&quot;^{rb_io_t}}' type64='{RFile=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;fptr&quot;^{rb_io_t}}'/>
<struct name='RFloat' type='{RFloat=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;float_value&quot;d}' type64='{RFloat=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;float_value&quot;d}'/>
<struct name='RHash' type='{RHash=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;ntbl&quot;^{st_table}&quot;iter_lev&quot;i&quot;ifnone&quot;I}' type64='{RHash=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;ntbl&quot;^{st_table}&quot;iter_lev&quot;i&quot;ifnone&quot;Q}'/>
<struct name='RMatch' type='{RMatch=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;str&quot;I&quot;rmatch&quot;^{rmatch}&quot;regexp&quot;I}' type64='{RMatch=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;str&quot;Q&quot;rmatch&quot;^{rmatch}&quot;regexp&quot;Q}'/>
<struct name='RObject' type='{RObject=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;as&quot;(?=&quot;heap&quot;{?=&quot;numiv&quot;l&quot;ivptr&quot;^I&quot;iv_index_tbl&quot;^{st_table}}&quot;ary&quot;[3L])}' type64='{RObject=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;as&quot;(?=&quot;heap&quot;{?=&quot;numiv&quot;q&quot;ivptr&quot;^Q&quot;iv_index_tbl&quot;^{st_table}}&quot;ary&quot;[3Q])}'/>
<struct name='RRational' type='{RRational=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;num&quot;I&quot;den&quot;I}' type64='{RRational=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;num&quot;Q&quot;den&quot;Q}'/>
<struct name='RRegexp' type='{RRegexp=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;ptr&quot;^{re_pattern_buffer}&quot;src&quot;I&quot;usecnt&quot;L}' type64='{RRegexp=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;ptr&quot;^{re_pattern_buffer}&quot;src&quot;Q&quot;usecnt&quot;Q}'/>
<struct name='RString' type='{RString=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;as&quot;(?=&quot;heap&quot;{?=&quot;len&quot;l&quot;ptr&quot;*&quot;aux&quot;(?=&quot;capa&quot;l&quot;shared&quot;I)}&quot;ary&quot;[12c])}' type64='{RString=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;as&quot;(?=&quot;heap&quot;{?=&quot;len&quot;q&quot;ptr&quot;*&quot;aux&quot;(?=&quot;capa&quot;q&quot;shared&quot;Q)}&quot;ary&quot;[24c])}'/>
<struct name='RStruct' type='{RStruct=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;as&quot;(?=&quot;heap&quot;{?=&quot;len&quot;l&quot;ptr&quot;^I}&quot;ary&quot;[3L])}' type64='{RStruct=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;as&quot;(?=&quot;heap&quot;{?=&quot;len&quot;q&quot;ptr&quot;^Q}&quot;ary&quot;[3Q])}'/>
<struct name='RTypedData' type='{RTypedData=&quot;basic&quot;{RBasic=&quot;flags&quot;I&quot;klass&quot;I}&quot;type&quot;^{rb_data_type_struct}&quot;typed_flag&quot;I&quot;data&quot;^v}' type64='{RTypedData=&quot;basic&quot;{RBasic=&quot;flags&quot;Q&quot;klass&quot;Q}&quot;type&quot;^{rb_data_type_struct}&quot;typed_flag&quot;Q&quot;data&quot;^v}'/>
<struct name='Regexp' type='{re_pattern_buffer=&quot;p&quot;*&quot;used&quot;I&quot;alloc&quot;I&quot;state&quot;i&quot;num_mem&quot;i&quot;num_repeat&quot;i&quot;num_null_check&quot;i&quot;num_comb_exp_check&quot;i&quot;num_call&quot;i&quot;capture_history&quot;I&quot;bt_mem_start&quot;I&quot;bt_mem_end&quot;I&quot;stack_pop_level&quot;i&quot;repeat_range_alloc&quot;i&quot;repeat_range&quot;^{_OnigRepeatRange=&quot;lower&quot;i&quot;upper&quot;i}&quot;enc&quot;^{OnigEncodingTypeST}&quot;options&quot;I&quot;syntax&quot;^{_OnigSyntaxType=&quot;op&quot;I&quot;op2&quot;I&quot;behavior&quot;I&quot;options&quot;I&quot;meta_char_table&quot;{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}}&quot;case_fold_flag&quot;I&quot;name_table&quot;^v&quot;optimize&quot;i&quot;threshold_len&quot;i&quot;anchor&quot;i&quot;anchor_dmin&quot;I&quot;anchor_dmax&quot;I&quot;sub_anchor&quot;i&quot;exact&quot;*&quot;exact_end&quot;*&quot;map&quot;[256C]&quot;int_map&quot;^i&quot;int_map_backward&quot;^i&quot;dmin&quot;I&quot;dmax&quot;I&quot;chain&quot;^{re_pattern_buffer}}' type64='{re_pattern_buffer=&quot;p&quot;*&quot;used&quot;I&quot;alloc&quot;I&quot;state&quot;i&quot;num_mem&quot;i&quot;num_repeat&quot;i&quot;num_null_check&quot;i&quot;num_comb_exp_check&quot;i&quot;num_call&quot;i&quot;capture_history&quot;I&quot;bt_mem_start&quot;I&quot;bt_mem_end&quot;I&quot;stack_pop_level&quot;i&quot;repeat_range_alloc&quot;i&quot;repeat_range&quot;^{_OnigRepeatRange=&quot;lower&quot;i&quot;upper&quot;i}&quot;enc&quot;^{OnigEncodingTypeST}&quot;options&quot;I&quot;syntax&quot;^{_OnigSyntaxType=&quot;op&quot;I&quot;op2&quot;I&quot;behavior&quot;I&quot;options&quot;I&quot;meta_char_table&quot;{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}}&quot;case_fold_flag&quot;I&quot;name_table&quot;^v&quot;optimize&quot;i&quot;threshold_len&quot;i&quot;anchor&quot;i&quot;anchor_dmin&quot;Q&quot;anchor_dmax&quot;Q&quot;sub_anchor&quot;i&quot;exact&quot;*&quot;exact_end&quot;*&quot;map&quot;[256C]&quot;int_map&quot;^i&quot;int_map_backward&quot;^i&quot;dmin&quot;Q&quot;dmax&quot;Q&quot;chain&quot;^{re_pattern_buffer}}'/>
<struct name='cfunc_data' type='{cfunc_data=&quot;ptr&quot;^v&quot;name&quot;*&quot;type&quot;i&quot;calltype&quot;I&quot;wrap&quot;I}' type64='{cfunc_data=&quot;ptr&quot;^v&quot;name&quot;*&quot;type&quot;i&quot;calltype&quot;Q&quot;wrap&quot;Q}'/>
<struct name='dl_handle' type='{dl_handle=&quot;ptr&quot;^v&quot;open&quot;i&quot;enable_close&quot;i}'/>
<struct name='ptr_data' type='{ptr_data=&quot;ptr&quot;^v&quot;size&quot;l&quot;free&quot;^?&quot;wrap&quot;[2L]}' type64='{ptr_data=&quot;ptr&quot;^v&quot;size&quot;q&quot;free&quot;^?&quot;wrap&quot;[2Q]}'/>
<struct name='rb_data_type_struct' type='{rb_data_type_struct=&quot;wrap_struct_name&quot;*&quot;function&quot;{?=&quot;dmark&quot;^?&quot;dfree&quot;^?&quot;dsize&quot;^?&quot;reserved&quot;[2^v]}&quot;parent&quot;^{rb_data_type_struct}&quot;data&quot;^v}'/>
<struct name='rb_data_type_t' type='{rb_data_type_struct=&quot;wrap_struct_name&quot;*&quot;function&quot;{?=&quot;dmark&quot;^?&quot;dfree&quot;^?&quot;dsize&quot;^?&quot;reserved&quot;[2^v]}&quot;parent&quot;^{rb_data_type_struct}&quot;data&quot;^v}'/>
<struct name='rb_digest_metadata_t' type='{_rb_digest_metadata_t=&quot;api_version&quot;i&quot;digest_len&quot;I&quot;block_len&quot;I&quot;ctx_size&quot;I&quot;init_func&quot;^?&quot;update_func&quot;^?&quot;finish_func&quot;^?}' type64='{_rb_digest_metadata_t=&quot;api_version&quot;i&quot;digest_len&quot;Q&quot;block_len&quot;Q&quot;ctx_size&quot;Q&quot;init_func&quot;^?&quot;update_func&quot;^?&quot;finish_func&quot;^?}'/>
<struct name='rb_encoding' type='{OnigEncodingTypeST=&quot;precise_mbc_enc_len&quot;^?&quot;name&quot;*&quot;max_enc_len&quot;i&quot;min_enc_len&quot;i&quot;is_mbc_newline&quot;^?&quot;mbc_to_code&quot;^?&quot;code_to_mbclen&quot;^?&quot;code_to_mbc&quot;^?&quot;mbc_case_fold&quot;^?&quot;apply_all_case_fold&quot;^?&quot;get_case_fold_codes_by_str&quot;^?&quot;property_name_to_ctype&quot;^?&quot;is_code_ctype&quot;^?&quot;get_ctype_code_range&quot;^?&quot;left_adjust_char_head&quot;^?&quot;is_allowed_reverse_match&quot;^?&quot;ruby_encoding_index&quot;i&quot;flags&quot;I}'/>
<struct name='rb_exec_arg' type='{rb_exec_arg=&quot;execarg_obj&quot;I}' type64='{rb_exec_arg=&quot;execarg_obj&quot;Q}'/>
<struct name='rb_fdset_t' type='{_rb_fdset_t=&quot;maxfd&quot;i&quot;fdset&quot;^{fd_set}}'/>
<struct name='rb_io_buffer_t' type='{_rb_io_buffer_t=&quot;ptr&quot;*&quot;off&quot;i&quot;len&quot;i&quot;capa&quot;i}'/>
<struct name='rb_io_t' type='{rb_io_t=&quot;fd&quot;i&quot;stdio_file&quot;^{__sFILE}&quot;mode&quot;i&quot;pid&quot;i&quot;lineno&quot;i&quot;pathv&quot;I&quot;finalize&quot;^?&quot;wbuf&quot;{_rb_io_buffer_t=&quot;ptr&quot;*&quot;off&quot;i&quot;len&quot;i&quot;capa&quot;i}&quot;rbuf&quot;{_rb_io_buffer_t=&quot;ptr&quot;*&quot;off&quot;i&quot;len&quot;i&quot;capa&quot;i}&quot;tied_io_for_writing&quot;I&quot;encs&quot;{rb_io_enc_t=&quot;enc&quot;^{OnigEncodingTypeST}&quot;enc2&quot;^{OnigEncodingTypeST}&quot;ecflags&quot;i&quot;ecopts&quot;I}&quot;readconv&quot;^{rb_econv_t}&quot;cbuf&quot;{_rb_io_buffer_t=&quot;ptr&quot;*&quot;off&quot;i&quot;len&quot;i&quot;capa&quot;i}&quot;writeconv&quot;^{rb_econv_t}&quot;writeconv_asciicompat&quot;I&quot;writeconv_pre_ecflags&quot;i&quot;writeconv_pre_ecopts&quot;I&quot;writeconv_initialized&quot;i&quot;write_lock&quot;I}' type64='{rb_io_t=&quot;fd&quot;i&quot;stdio_file&quot;^{__sFILE}&quot;mode&quot;i&quot;pid&quot;i&quot;lineno&quot;i&quot;pathv&quot;Q&quot;finalize&quot;^?&quot;wbuf&quot;{_rb_io_buffer_t=&quot;ptr&quot;*&quot;off&quot;i&quot;len&quot;i&quot;capa&quot;i}&quot;rbuf&quot;{_rb_io_buffer_t=&quot;ptr&quot;*&quot;off&quot;i&quot;len&quot;i&quot;capa&quot;i}&quot;tied_io_for_writing&quot;Q&quot;encs&quot;{rb_io_enc_t=&quot;enc&quot;^{OnigEncodingTypeST}&quot;enc2&quot;^{OnigEncodingTypeST}&quot;ecflags&quot;i&quot;ecopts&quot;Q}&quot;readconv&quot;^{rb_econv_t}&quot;cbuf&quot;{_rb_io_buffer_t=&quot;ptr&quot;*&quot;off&quot;i&quot;len&quot;i&quot;capa&quot;i}&quot;writeconv&quot;^{rb_econv_t}&quot;writeconv_asciicompat&quot;Q&quot;writeconv_pre_ecflags&quot;i&quot;writeconv_pre_ecopts&quot;Q&quot;writeconv_initialized&quot;i&quot;write_lock&quot;Q}'/>
<struct name='re_pattern_buffer' type='{re_pattern_buffer=&quot;p&quot;*&quot;used&quot;I&quot;alloc&quot;I&quot;state&quot;i&quot;num_mem&quot;i&quot;num_repeat&quot;i&quot;num_null_check&quot;i&quot;num_comb_exp_check&quot;i&quot;num_call&quot;i&quot;capture_history&quot;I&quot;bt_mem_start&quot;I&quot;bt_mem_end&quot;I&quot;stack_pop_level&quot;i&quot;repeat_range_alloc&quot;i&quot;repeat_range&quot;^{_OnigRepeatRange=&quot;lower&quot;i&quot;upper&quot;i}&quot;enc&quot;^{OnigEncodingTypeST}&quot;options&quot;I&quot;syntax&quot;^{_OnigSyntaxType=&quot;op&quot;I&quot;op2&quot;I&quot;behavior&quot;I&quot;options&quot;I&quot;meta_char_table&quot;{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}}&quot;case_fold_flag&quot;I&quot;name_table&quot;^v&quot;optimize&quot;i&quot;threshold_len&quot;i&quot;anchor&quot;i&quot;anchor_dmin&quot;I&quot;anchor_dmax&quot;I&quot;sub_anchor&quot;i&quot;exact&quot;*&quot;exact_end&quot;*&quot;map&quot;[256C]&quot;int_map&quot;^i&quot;int_map_backward&quot;^i&quot;dmin&quot;I&quot;dmax&quot;I&quot;chain&quot;^{re_pattern_buffer}}' type64='{re_pattern_buffer=&quot;p&quot;*&quot;used&quot;I&quot;alloc&quot;I&quot;state&quot;i&quot;num_mem&quot;i&quot;num_repeat&quot;i&quot;num_null_check&quot;i&quot;num_comb_exp_check&quot;i&quot;num_call&quot;i&quot;capture_history&quot;I&quot;bt_mem_start&quot;I&quot;bt_mem_end&quot;I&quot;stack_pop_level&quot;i&quot;repeat_range_alloc&quot;i&quot;repeat_range&quot;^{_OnigRepeatRange=&quot;lower&quot;i&quot;upper&quot;i}&quot;enc&quot;^{OnigEncodingTypeST}&quot;options&quot;I&quot;syntax&quot;^{_OnigSyntaxType=&quot;op&quot;I&quot;op2&quot;I&quot;behavior&quot;I&quot;options&quot;I&quot;meta_char_table&quot;{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}}&quot;case_fold_flag&quot;I&quot;name_table&quot;^v&quot;optimize&quot;i&quot;threshold_len&quot;i&quot;anchor&quot;i&quot;anchor_dmin&quot;Q&quot;anchor_dmax&quot;Q&quot;sub_anchor&quot;i&quot;exact&quot;*&quot;exact_end&quot;*&quot;map&quot;[256C]&quot;int_map&quot;^i&quot;int_map_backward&quot;^i&quot;dmin&quot;Q&quot;dmax&quot;Q&quot;chain&quot;^{re_pattern_buffer}}'/>
<struct name='re_registers' type='{re_registers=&quot;allocated&quot;i&quot;num_regs&quot;i&quot;beg&quot;^i&quot;end&quot;^i&quot;history_root&quot;^{OnigCaptureTreeNodeStruct}}' type64='{re_registers=&quot;allocated&quot;i&quot;num_regs&quot;i&quot;beg&quot;^q&quot;end&quot;^q&quot;history_root&quot;^{OnigCaptureTreeNodeStruct}}'/>
<struct name='regex_t' type='{re_pattern_buffer=&quot;p&quot;*&quot;used&quot;I&quot;alloc&quot;I&quot;state&quot;i&quot;num_mem&quot;i&quot;num_repeat&quot;i&quot;num_null_check&quot;i&quot;num_comb_exp_check&quot;i&quot;num_call&quot;i&quot;capture_history&quot;I&quot;bt_mem_start&quot;I&quot;bt_mem_end&quot;I&quot;stack_pop_level&quot;i&quot;repeat_range_alloc&quot;i&quot;repeat_range&quot;^{_OnigRepeatRange=&quot;lower&quot;i&quot;upper&quot;i}&quot;enc&quot;^{OnigEncodingTypeST}&quot;options&quot;I&quot;syntax&quot;^{_OnigSyntaxType=&quot;op&quot;I&quot;op2&quot;I&quot;behavior&quot;I&quot;options&quot;I&quot;meta_char_table&quot;{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}}&quot;case_fold_flag&quot;I&quot;name_table&quot;^v&quot;optimize&quot;i&quot;threshold_len&quot;i&quot;anchor&quot;i&quot;anchor_dmin&quot;I&quot;anchor_dmax&quot;I&quot;sub_anchor&quot;i&quot;exact&quot;*&quot;exact_end&quot;*&quot;map&quot;[256C]&quot;int_map&quot;^i&quot;int_map_backward&quot;^i&quot;dmin&quot;I&quot;dmax&quot;I&quot;chain&quot;^{re_pattern_buffer}}' type64='{re_pattern_buffer=&quot;p&quot;*&quot;used&quot;I&quot;alloc&quot;I&quot;state&quot;i&quot;num_mem&quot;i&quot;num_repeat&quot;i&quot;num_null_check&quot;i&quot;num_comb_exp_check&quot;i&quot;num_call&quot;i&quot;capture_history&quot;I&quot;bt_mem_start&quot;I&quot;bt_mem_end&quot;I&quot;stack_pop_level&quot;i&quot;repeat_range_alloc&quot;i&quot;repeat_range&quot;^{_OnigRepeatRange=&quot;lower&quot;i&quot;upper&quot;i}&quot;enc&quot;^{OnigEncodingTypeST}&quot;options&quot;I&quot;syntax&quot;^{_OnigSyntaxType=&quot;op&quot;I&quot;op2&quot;I&quot;behavior&quot;I&quot;options&quot;I&quot;meta_char_table&quot;{_OnigMetaCharTableType=&quot;esc&quot;I&quot;anychar&quot;I&quot;anytime&quot;I&quot;zero_or_one_time&quot;I&quot;one_or_more_time&quot;I&quot;anychar_anytime&quot;I}}&quot;case_fold_flag&quot;I&quot;name_table&quot;^v&quot;optimize&quot;i&quot;threshold_len&quot;i&quot;anchor&quot;i&quot;anchor_dmin&quot;Q&quot;anchor_dmax&quot;Q&quot;sub_anchor&quot;i&quot;exact&quot;*&quot;exact_end&quot;*&quot;map&quot;[256C]&quot;int_map&quot;^i&quot;int_map_backward&quot;^i&quot;dmin&quot;Q&quot;dmax&quot;Q&quot;chain&quot;^{re_pattern_buffer}}'/>
<struct name='rmatch' type='{rmatch=&quot;regs&quot;{re_registers=&quot;allocated&quot;i&quot;num_regs&quot;i&quot;beg&quot;^i&quot;end&quot;^i&quot;history_root&quot;^{OnigCaptureTreeNodeStruct}}&quot;char_offset_updated&quot;i&quot;char_offset_num_allocated&quot;i&quot;char_offset&quot;^{rmatch_offset}}' type64='{rmatch=&quot;regs&quot;{re_registers=&quot;allocated&quot;i&quot;num_regs&quot;i&quot;beg&quot;^q&quot;end&quot;^q&quot;history_root&quot;^{OnigCaptureTreeNodeStruct}}&quot;char_offset_updated&quot;i&quot;char_offset_num_allocated&quot;i&quot;char_offset&quot;^{rmatch_offset}}'/>
<struct name='rmatch_offset' type='{rmatch_offset=&quot;beg&quot;l&quot;end&quot;l}' type64='{rmatch_offset=&quot;beg&quot;q&quot;end&quot;q}'/>
<struct name='st_hash_type' type='{st_hash_type=&quot;compare&quot;^?&quot;hash&quot;^?}'/>
<struct name='st_table' type='{st_table=&quot;type&quot;^{st_hash_type}&quot;num_bins&quot;I&quot;entries_packed&quot;b1&quot;num_entries&quot;b31&quot;as&quot;(?=&quot;big&quot;{?=&quot;bins&quot;^^{st_table_entry}&quot;head&quot;^{st_table_entry}&quot;tail&quot;^{st_table_entry}}&quot;packed&quot;{?=&quot;entries&quot;^{st_packed_entry}&quot;real_entries&quot;I})}' type64='{st_table=&quot;type&quot;^{st_hash_type}&quot;num_bins&quot;Q&quot;entries_packed&quot;b1&quot;num_entries&quot;b63&quot;as&quot;(?=&quot;big&quot;{?=&quot;bins&quot;^^{st_table_entry}&quot;head&quot;^{st_table_entry}&quot;tail&quot;^{st_table_entry}}&quot;packed&quot;{?=&quot;entries&quot;^{st_packed_entry}&quot;real_entries&quot;Q})}'/>
<opaque name='rb_classext_t' type='^{rb_classext_struct=}'/>
<opaque name='rb_debug_inspector_t' type='^{rb_debug_inspector_struct=}'/>
<opaque name='rb_econv_t' type='^{rb_econv_t=}'/>
<opaque name='rb_trace_arg_t' type='^{rb_trace_arg_struct=}'/>
<opaque name='ruby_vm_t' type='^{rb_vm_struct=}'/>
<constant name='OnigDefaultCaseFoldFlag' type='I'/>
<constant name='OnigDefaultSyntax' type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigEncDefaultCharEncoding' type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<constant name='OnigEncodingASCII' type='{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<constant name='OnigSyntaxASIS' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxEmacs' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxGnuRegex' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxGrep' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxJava' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxPerl' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxPerl58' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxPerl58_NG' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxPosixBasic' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxPosixExtended' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxPython' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='OnigSyntaxRuby' type='{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<constant name='rb_argv0' type='L' type64='Q'/>
<constant name='rb_cArray' type='L' type64='Q'/>
<constant name='rb_cBasicObject' type='L' type64='Q'/>
<constant name='rb_cBignum' type='L' type64='Q'/>
<constant name='rb_cBinding' type='L' type64='Q'/>
<constant name='rb_cClass' type='L' type64='Q'/>
<constant name='rb_cComplex' type='L' type64='Q'/>
<constant name='rb_cCont' type='L' type64='Q'/>
<constant name='rb_cDLHandle' type='L' type64='Q'/>
<constant name='rb_cDLSymbol' type='L' type64='Q'/>
<constant name='rb_cData' type='L' type64='Q'/>
<constant name='rb_cDir' type='L' type64='Q'/>
<constant name='rb_cEncoding' type='L' type64='Q'/>
<constant name='rb_cEnumerator' type='L' type64='Q'/>
<constant name='rb_cFalseClass' type='L' type64='Q'/>
<constant name='rb_cFile' type='L' type64='Q'/>
<constant name='rb_cFixnum' type='L' type64='Q'/>
<constant name='rb_cFloat' type='L' type64='Q'/>
<constant name='rb_cHash' type='L' type64='Q'/>
<constant name='rb_cIO' type='L' type64='Q'/>
<constant name='rb_cInteger' type='L' type64='Q'/>
<constant name='rb_cMatch' type='L' type64='Q'/>
<constant name='rb_cMethod' type='L' type64='Q'/>
<constant name='rb_cModule' type='L' type64='Q'/>
<constant name='rb_cNameErrorMesg' type='L' type64='Q'/>
<constant name='rb_cNilClass' type='L' type64='Q'/>
<constant name='rb_cNumeric' type='L' type64='Q'/>
<constant name='rb_cObject' type='L' type64='Q'/>
<constant name='rb_cProc' type='L' type64='Q'/>
<constant name='rb_cRandom' type='L' type64='Q'/>
<constant name='rb_cRange' type='L' type64='Q'/>
<constant name='rb_cRational' type='L' type64='Q'/>
<constant name='rb_cRegexp' type='L' type64='Q'/>
<constant name='rb_cStat' type='L' type64='Q'/>
<constant name='rb_cString' type='L' type64='Q'/>
<constant name='rb_cStruct' type='L' type64='Q'/>
<constant name='rb_cSymbol' type='L' type64='Q'/>
<constant name='rb_cThread' type='L' type64='Q'/>
<constant name='rb_cTime' type='L' type64='Q'/>
<constant name='rb_cTrueClass' type='L' type64='Q'/>
<constant name='rb_cUnboundMethod' type='L' type64='Q'/>
<constant name='rb_default_rs' type='L' type64='Q'/>
<constant name='rb_eArgError' type='L' type64='Q'/>
<constant name='rb_eDLError' type='L' type64='Q'/>
<constant name='rb_eDLTypeError' type='L' type64='Q'/>
<constant name='rb_eEOFError' type='L' type64='Q'/>
<constant name='rb_eEncCompatError' type='L' type64='Q'/>
<constant name='rb_eEncodingError' type='L' type64='Q'/>
<constant name='rb_eException' type='L' type64='Q'/>
<constant name='rb_eFatal' type='L' type64='Q'/>
<constant name='rb_eFloatDomainError' type='L' type64='Q'/>
<constant name='rb_eIOError' type='L' type64='Q'/>
<constant name='rb_eIndexError' type='L' type64='Q'/>
<constant name='rb_eInterrupt' type='L' type64='Q'/>
<constant name='rb_eKeyError' type='L' type64='Q'/>
<constant name='rb_eLoadError' type='L' type64='Q'/>
<constant name='rb_eLocalJumpError' type='L' type64='Q'/>
<constant name='rb_eMathDomainError' type='L' type64='Q'/>
<constant name='rb_eNameError' type='L' type64='Q'/>
<constant name='rb_eNoMemError' type='L' type64='Q'/>
<constant name='rb_eNoMethodError' type='L' type64='Q'/>
<constant name='rb_eNotImpError' type='L' type64='Q'/>
<constant name='rb_eRangeError' type='L' type64='Q'/>
<constant name='rb_eRegexpError' type='L' type64='Q'/>
<constant name='rb_eRuntimeError' type='L' type64='Q'/>
<constant name='rb_eScriptError' type='L' type64='Q'/>
<constant name='rb_eSecurityError' type='L' type64='Q'/>
<constant name='rb_eSignal' type='L' type64='Q'/>
<constant name='rb_eStandardError' type='L' type64='Q'/>
<constant name='rb_eStopIteration' type='L' type64='Q'/>
<constant name='rb_eSyntaxError' type='L' type64='Q'/>
<constant name='rb_eSysStackError' type='L' type64='Q'/>
<constant name='rb_eSystemCallError' type='L' type64='Q'/>
<constant name='rb_eSystemExit' type='L' type64='Q'/>
<constant name='rb_eThreadError' type='L' type64='Q'/>
<constant name='rb_eTypeError' type='L' type64='Q'/>
<constant name='rb_eZeroDivError' type='L' type64='Q'/>
<constant name='rb_fs' type='L' type64='Q'/>
<constant name='rb_mComparable' type='L' type64='Q'/>
<constant name='rb_mDL' type='L' type64='Q'/>
<constant name='rb_mEnumerable' type='L' type64='Q'/>
<constant name='rb_mErrno' type='L' type64='Q'/>
<constant name='rb_mFileTest' type='L' type64='Q'/>
<constant name='rb_mGC' type='L' type64='Q'/>
<constant name='rb_mKernel' type='L' type64='Q'/>
<constant name='rb_mMath' type='L' type64='Q'/>
<constant name='rb_mProcess' type='L' type64='Q'/>
<constant name='rb_mWaitReadable' type='L' type64='Q'/>
<constant name='rb_mWaitWritable' type='L' type64='Q'/>
<constant name='rb_output_fs' type='L' type64='Q'/>
<constant name='rb_output_rs' type='L' type64='Q'/>
<constant name='rb_rs' type='L' type64='Q'/>
<constant name='rb_stderr' type='L' type64='Q'/>
<constant name='rb_stdin' type='L' type64='Q'/>
<constant name='rb_stdout' type='L' type64='Q'/>
<constant name='rbdl_id_cdecl' type='L' type64='Q'/>
<constant name='rbdl_id_stdcall' type='L' type64='Q'/>
<constant name='ruby_api_version' type='[3i]'/>
<constant name='ruby_copyright' type='^c'/>
<constant name='ruby_description' type='^c'/>
<constant name='ruby_engine' type='^c'/>
<constant name='ruby_patchlevel' type='i'/>
<constant name='ruby_platform' type='^c'/>
<constant name='ruby_release_date' type='^c'/>
<constant name='ruby_sourcefile' type='*'/>
<constant name='ruby_sourceline' type='i'/>
<constant name='ruby_version' type='^c'/>
<string_constant name='DLEXT' value='.bundle'/>
<string_constant name='LIBDIR_BASENAME' value='lib'/>
<string_constant name='PATH_ENV' value='PATH'/>
<string_constant name='PATH_SEP' value=':'/>
<string_constant name='PRIXBDIGIT' value='X'/>
<string_constant name='PRIXBDIGIT_DBL' value='llX'/>
<string_constant name='PRIXPTRDIFF' value='X' value64='lX'/>
<string_constant name='PRIXSIZE' value='X' value64='lX'/>
<string_constant name='PRIXVALUE' value='lX'/>
<string_constant name='PRI_BDIGIT_DBL_PREFIX' value='ll'/>
<string_constant name='PRI_BDIGIT_PREFIX' value=''/>
<string_constant name='PRI_DEVT_PREFIX' value=''/>
<string_constant name='PRI_GIDT_PREFIX' value=''/>
<string_constant name='PRI_INT_PREFIX' value=''/>
<string_constant name='PRI_LL_PREFIX' value='ll'/>
<string_constant name='PRI_LONG_PREFIX' value='l'/>
<string_constant name='PRI_MODET_PREFIX' value=''/>
<string_constant name='PRI_PIDT_PREFIX' value=''/>
<string_constant name='PRI_PTRDIFF_PREFIX' value='' value64='l'/>
<string_constant name='PRI_RLIM_PREFIX' value='ll'/>
<string_constant name='PRI_SIZE_PREFIX' value='' value64='l'/>
<string_constant name='PRI_TIMET_PREFIX' value='l'/>
<string_constant name='PRI_UIDT_PREFIX' value=''/>
<string_constant name='PRI_VALUE_PREFIX' value='l'/>
<string_constant name='PRIdBDIGIT' value='d'/>
<string_constant name='PRIdBDIGIT_DBL' value='lld'/>
<string_constant name='PRIdPTRDIFF' value='d' value64='ld'/>
<string_constant name='PRIdSIZE' value='d' value64='ld'/>
<string_constant name='PRIdVALUE' value='ld'/>
<string_constant name='PRIiBDIGIT' value='i'/>
<string_constant name='PRIiBDIGIT_DBL' value='lli'/>
<string_constant name='PRIiPTRDIFF' value='i' value64='li'/>
<string_constant name='PRIiSIZE' value='i' value64='li'/>
<string_constant name='PRIoBDIGIT' value='o'/>
<string_constant name='PRIoBDIGIT_DBL' value='llo'/>
<string_constant name='PRIoPTRDIFF' value='o' value64='lo'/>
<string_constant name='PRIoSIZE' value='o' value64='lo'/>
<string_constant name='PRIoVALUE' value='lo'/>
<string_constant name='PRIsVALUE' value='li'/>
<string_constant name='PRIuBDIGIT' value='u'/>
<string_constant name='PRIuBDIGIT_DBL' value='llu'/>
<string_constant name='PRIuPTRDIFF' value='u' value64='lu'/>
<string_constant name='PRIuSIZE' value='u' value64='lu'/>
<string_constant name='PRIuVALUE' value='lu'/>
<string_constant name='PRIxBDIGIT' value='x'/>
<string_constant name='PRIxBDIGIT_DBL' value='llx'/>
<string_constant name='PRIxPTRDIFF' value='x' value64='lx'/>
<string_constant name='PRIxSIZE' value='x' value64='lx'/>
<string_constant name='PRIxVALUE' value='lx'/>
<string_constant name='RUBY_AUTHOR' value='Yukihiro Matsumoto'/>
<string_constant name='RUBY_EXEC_PREFIX' value='/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr'/>
<string_constant name='RUBY_PLATFORM' value='unknown-unknown'/>
<string_constant name='RUBY_PLATFORM_CPU' value='i386' value64='x86_64'/>
<enum name='AC_APPLE_UNIVERSAL_BUILD' value='1'/>
<enum name='ALIGN_CHAR' value='1'/>
<enum name='ALIGN_DOUBLE' value='4' value64='8'/>
<enum name='ALIGN_FLOAT' value='4'/>
<enum name='ALIGN_INT' value='4'/>
<enum name='ALIGN_LONG' value='4' value64='8'/>
<enum name='ALIGN_LONG_LONG' value='4' value64='8'/>
<enum name='ALIGN_SHORT' value='2'/>
<enum name='ALIGN_VOIDP' value='4' value64='8'/>
<enum name='CANONICALIZATION_FOR_MATHN' value='1'/>
<enum name='CASEFOLD_FILESYSTEM' value='0'/>
<enum name='DLEXT_MAXLEN' value='7'/>
<enum name='DLSTACK_SIZE' value='20'/>
<enum name='DLTYPE_CHAR' value='2'/>
<enum name='DLTYPE_DOUBLE' value='8'/>
<enum name='DLTYPE_FLOAT' value='7'/>
<enum name='DLTYPE_INT' value='4'/>
<enum name='DLTYPE_LONG' value='5'/>
<enum name='DLTYPE_LONG_LONG' value='6'/>
<enum name='DLTYPE_SHORT' value='3'/>
<enum name='DLTYPE_VOID' value='0'/>
<enum name='DLTYPE_VOIDP' value='1'/>
<enum name='ECONV_AFTER_OUTPUT' value='131072'/>
<enum name='ECONV_CRLF_NEWLINE_DECORATOR' value='4096'/>
<enum name='ECONV_CR_NEWLINE_DECORATOR' value='8192'/>
<enum name='ECONV_DECORATOR_MASK' value='65280'/>
<enum name='ECONV_DEFAULT_NEWLINE_DECORATOR' value='0'/>
<enum name='ECONV_ERROR_HANDLER_MASK' value='255'/>
<enum name='ECONV_INVALID_MASK' value='15'/>
<enum name='ECONV_INVALID_REPLACE' value='2'/>
<enum name='ECONV_NEWLINE_DECORATOR_MASK' value='16128'/>
<enum name='ECONV_NEWLINE_DECORATOR_READ_MASK' value='3840'/>
<enum name='ECONV_NEWLINE_DECORATOR_WRITE_MASK' value='12288'/>
<enum name='ECONV_PARTIAL_INPUT' value='65536'/>
<enum name='ECONV_STATEFUL_DECORATOR_MASK' value='15728640'/>
<enum name='ECONV_UNDEF_HEX_CHARREF' value='48'/>
<enum name='ECONV_UNDEF_MASK' value='240'/>
<enum name='ECONV_UNDEF_REPLACE' value='32'/>
<enum name='ECONV_UNIVERSAL_NEWLINE_DECORATOR' value='256'/>
<enum name='ECONV_XML_ATTR_CONTENT_DECORATOR' value='32768'/>
<enum name='ECONV_XML_ATTR_QUOTE_DECORATOR' value='1048576'/>
<enum name='ECONV_XML_TEXT_DECORATOR' value='16384'/>
<enum name='ELTS_SHARED' value='16384'/>
<enum name='ENCODING_INLINE_MAX' value='1023'/>
<enum name='ENCODING_MASK' value='4290772992'/>
<enum name='ENCODING_MAXNAMELEN' value='42'/>
<enum name='ENCODING_SHIFT' value='22'/>
<enum name='ENC_CODERANGE_7BIT' value='1048576'/>
<enum name='ENC_CODERANGE_BROKEN' value='3145728'/>
<enum name='ENC_CODERANGE_MASK' value='3145728'/>
<enum name='ENC_CODERANGE_UNKNOWN' value='0'/>
<enum name='ENC_CODERANGE_VALID' value='2097152'/>
<enum name='ENC_DUMMY_FLAG' value='16777216'/>
<enum name='ENC_INDEX_MASK' value='16777215'/>
<enum name='FIXNUM_FLAG' value='1'/>
<enum name='FIXNUM_MAX' value='1073741823' value64='4611686018427387903'/>
<enum name='FIXNUM_MIN' value='-1073741824' value64='-4611686018427387904'/>
<enum name='FLONUM_FLAG' value64='2'/>
<enum name='FLONUM_MASK' value64='3'/>
<enum name='FL_EXIVAR' value='1024'/>
<enum name='FL_FINALIZE' value='128'/>
<enum name='FL_FREEZE' value='2048'/>
<enum name='FL_RESERVED1' value='32'/>
<enum name='FL_RESERVED2' value='64'/>
<enum name='FL_SINGLETON' value='4096'/>
<enum name='FL_TAINT' value='256'/>
<enum name='FL_UNTRUSTED' value='512'/>
<enum name='FL_USER0' value='4096'/>
<enum name='FL_USER1' value='8192'/>
<enum name='FL_USER10' value='4194304'/>
<enum name='FL_USER11' value='8388608'/>
<enum name='FL_USER12' value='16777216'/>
<enum name='FL_USER13' value='33554432'/>
<enum name='FL_USER14' value='67108864'/>
<enum name='FL_USER15' value='134217728'/>
<enum name='FL_USER16' value='268435456'/>
<enum name='FL_USER17' value='536870912'/>
<enum name='FL_USER18' value='1073741824'/>
<enum name='FL_USER19' value='2147483648'/>
<enum name='FL_USER2' value='16384'/>
<enum name='FL_USER3' value='32768'/>
<enum name='FL_USER4' value='65536'/>
<enum name='FL_USER5' value='131072'/>
<enum name='FL_USER6' value='262144'/>
<enum name='FL_USER7' value='524288'/>
<enum name='FL_USER8' value='1048576'/>
<enum name='FL_USER9' value='2097152'/>
<enum name='FL_USHIFT' value='12'/>
<enum name='FMODE_APPEND' value='64'/>
<enum name='FMODE_BINMODE' value='4'/>
<enum name='FMODE_CREATE' value='128'/>
<enum name='FMODE_DUPLEX' value='32'/>
<enum name='FMODE_READABLE' value='1'/>
<enum name='FMODE_READWRITE' value='3'/>
<enum name='FMODE_SETENC_BY_BOM' value='1048576'/>
<enum name='FMODE_SYNC' value='8'/>
<enum name='FMODE_TEXTMODE' value='4096'/>
<enum name='FMODE_TRUNC' value='2048'/>
<enum name='FMODE_TTY' value='16'/>
<enum name='FMODE_WRITABLE' value='2'/>
<enum name='FMODE_WSPLIT' value='512'/>
<enum name='FMODE_WSPLIT_INITIALIZED' value='1024'/>
<enum name='HAVE_ACOSH' value='1'/>
<enum name='HAVE_ALLOCA' value='1'/>
<enum name='HAVE_ALLOCA_H' value='1'/>
<enum name='HAVE_BACKTRACE' value='1'/>
<enum name='HAVE_CBRT' value='1'/>
<enum name='HAVE_CHROOT' value='1'/>
<enum name='HAVE_CLOSE' value='1'/>
<enum name='HAVE_COSH' value='1'/>
<enum name='HAVE_CRT_EXTERNS_H' value='1'/>
<enum name='HAVE_CRYPT' value='1'/>
<enum name='HAVE_DAYLIGHT' value='1'/>
<enum name='HAVE_DECL_SYS_NERR' value='1'/>
<enum name='HAVE_DIRENT_H' value='1'/>
<enum name='HAVE_DLOPEN' value='1'/>
<enum name='HAVE_DUP' value='1'/>
<enum name='HAVE_DUP2' value='1'/>
<enum name='HAVE_ERF' value='1'/>
<enum name='HAVE_FCHMOD' value='1'/>
<enum name='HAVE_FCHOWN' value='1'/>
<enum name='HAVE_FCNTL' value='1'/>
<enum name='HAVE_FCNTL_H' value='1'/>
<enum name='HAVE_FFS' value='1'/>
<enum name='HAVE_FINITE' value='1'/>
<enum name='HAVE_FLOAT_H' value='1'/>
<enum name='HAVE_FLOCK' value='1'/>
<enum name='HAVE_FMOD' value='1'/>
<enum name='HAVE_FORK' value='1'/>
<enum name='HAVE_FSEEKO' value='1'/>
<enum name='HAVE_FSYNC' value='1'/>
<enum name='HAVE_FTELLO' value='1'/>
<enum name='HAVE_FTRUNCATE' value='1'/>
<enum name='HAVE_GETCWD' value='1'/>
<enum name='HAVE_GETGRNAM_R' value='1'/>
<enum name='HAVE_GETGROUPS' value='1'/>
<enum name='HAVE_GETPGID' value='1'/>
<enum name='HAVE_GETPGRP' value='1'/>
<enum name='HAVE_GETPRIORITY' value='1'/>
<enum name='HAVE_GETPWNAM_R' value='1'/>
<enum name='HAVE_GETRLIMIT' value='1'/>
<enum name='HAVE_GETSID' value='1'/>
<enum name='HAVE_GETTIMEOFDAY' value='1'/>
<enum name='HAVE_GMTIME_R' value='1'/>
<enum name='HAVE_GRP_H' value='1'/>
<enum name='HAVE_HYPOT' value='1'/>
<enum name='HAVE_INITGROUPS' value='1'/>
<enum name='HAVE_INT16_T' value='1'/>
<enum name='HAVE_INT32_T' value='1'/>
<enum name='HAVE_INT64_T' value='1'/>
<enum name='HAVE_INT8_T' value='1'/>
<enum name='HAVE_INTPTR_T' value='1'/>
<enum name='HAVE_INTTYPES_H' value='1'/>
<enum name='HAVE_IOCTL' value='1'/>
<enum name='HAVE_ISINF' value='1'/>
<enum name='HAVE_ISNAN' value='1'/>
<enum name='HAVE_ISSETUGID' value='1'/>
<enum name='HAVE_KILLPG' value='1'/>
<enum name='HAVE_LANGINFO_H' value='1'/>
<enum name='HAVE_LCHMOD' value='1'/>
<enum name='HAVE_LCHOWN' value='1'/>
<enum name='HAVE_LGAMMA_R' value='1'/>
<enum name='HAVE_LIBDL' value='1'/>
<enum name='HAVE_LIBPTHREAD' value='1'/>
<enum name='HAVE_LIMITS_H' value='1'/>
<enum name='HAVE_LINK' value='1'/>
<enum name='HAVE_LLABS' value='1'/>
<enum name='HAVE_LOCALE_H' value='1'/>
<enum name='HAVE_LOCKF' value='1'/>
<enum name='HAVE_LOG2' value='1'/>
<enum name='HAVE_LONG_LONG' value='1'/>
<enum name='HAVE_LSTAT' value='1'/>
<enum name='HAVE_MEMMOVE' value='1'/>
<enum name='HAVE_MEMORY_H' value='1'/>
<enum name='HAVE_MKTIME' value='1'/>
<enum name='HAVE_NETINET_IN_SYSTM_H' value='1'/>
<enum name='HAVE_OFF_T' value='1'/>
<enum name='HAVE_PAUSE' value='1'/>
<enum name='HAVE_POLL' value='1'/>
<enum name='HAVE_POSIX_MEMALIGN' value='1'/>
<enum name='HAVE_PREAD' value='1'/>
<enum name='HAVE_PROTOTYPES' value='1'/>
<enum name='HAVE_PTHREAD_ATTR_GETSTACK' value='1'/>
<enum name='HAVE_PTHREAD_ATTR_INIT' value='1'/>
<enum name='HAVE_PTHREAD_ATTR_SETINHERITSCHED' value='1'/>
<enum name='HAVE_PTHREAD_CONDATTR_INIT' value='1'/>
<enum name='HAVE_PTHREAD_COND_INIT' value='1'/>
<enum name='HAVE_PTHREAD_GET_STACKADDR_NP' value='1'/>
<enum name='HAVE_PTHREAD_GET_STACKSIZE_NP' value='1'/>
<enum name='HAVE_PTHREAD_H' value='1'/>
<enum name='HAVE_PTHREAD_SIGMASK' value='1'/>
<enum name='HAVE_PWD_H' value='1'/>
<enum name='HAVE_RB_DATA_TYPE_T_FUNCTION' value='1'/>
<enum name='HAVE_RB_DATA_TYPE_T_PARENT' value='1'/>
<enum name='HAVE_RB_DEFINE_ALLOC_FUNC' value='1'/>
<enum name='HAVE_RB_FD_INIT' value='1'/>
<enum name='HAVE_RB_IO_T' value='1'/>
<enum name='HAVE_RB_REG_NEW_STR' value='1'/>
<enum name='HAVE_RB_SCAN_ARGS_OPTIONAL_HASH' value='1'/>
<enum name='HAVE_READDIR_R' value='1'/>
<enum name='HAVE_READLINK' value='1'/>
<enum name='HAVE_ROUND' value='1'/>
<enum name='HAVE_RUBY_DEFINES_H' value='1'/>
<enum name='HAVE_RUBY_ENCODING_H' value='1'/>
<enum name='HAVE_RUBY_INTERN_H' value='1'/>
<enum name='HAVE_RUBY_IO_H' value='1'/>
<enum name='HAVE_RUBY_MISSING_H' value='1'/>
<enum name='HAVE_RUBY_ONIGURUMA_H' value='1'/>
<enum name='HAVE_RUBY_REGEX_H' value='1'/>
<enum name='HAVE_RUBY_RE_H' value='1'/>
<enum name='HAVE_RUBY_RUBY_H' value='1'/>
<enum name='HAVE_RUBY_ST_H' value='1'/>
<enum name='HAVE_RUBY_THREAD_H' value='1'/>
<enum name='HAVE_RUBY_UTIL_H' value='1'/>
<enum name='HAVE_RUBY_VERSION_H' value='1'/>
<enum name='HAVE_RUBY_VM_H' value='1'/>
<enum name='HAVE_SCHED_YIELD' value='1'/>
<enum name='HAVE_SEEKDIR' value='1'/>
<enum name='HAVE_SENDFILE' value='1'/>
<enum name='HAVE_SETEGID' value='1'/>
<enum name='HAVE_SETENV' value='1'/>
<enum name='HAVE_SETEUID' value='1'/>
<enum name='HAVE_SETGID' value='1'/>
<enum name='HAVE_SETGROUPS' value='1'/>
<enum name='HAVE_SETITIMER' value='1'/>
<enum name='HAVE_SETPGID' value='1'/>
<enum name='HAVE_SETPGRP' value='1'/>
<enum name='HAVE_SETREGID' value='1'/>
<enum name='HAVE_SETREUID' value='1'/>
<enum name='HAVE_SETRGID' value='1'/>
<enum name='HAVE_SETRLIMIT' value='1'/>
<enum name='HAVE_SETRUID' value='1'/>
<enum name='HAVE_SETSID' value='1'/>
<enum name='HAVE_SETUID' value='1'/>
<enum name='HAVE_SHUTDOWN' value='1'/>
<enum name='HAVE_SIGACTION' value='1'/>
<enum name='HAVE_SIGALTSTACK' value='1'/>
<enum name='HAVE_SIGNBIT' value='1'/>
<enum name='HAVE_SIGPROCMASK' value='1'/>
<enum name='HAVE_SIGSETJMP' value='1'/>
<enum name='HAVE_SINH' value='1'/>
<enum name='HAVE_SOCKETPAIR' value='1'/>
<enum name='HAVE_SSIZE_T' value='1'/>
<enum name='HAVE_STDARG_PROTOTYPES' value='1'/>
<enum name='HAVE_STDBOOL_H' value='1'/>
<enum name='HAVE_STDINT_H' value='1'/>
<enum name='HAVE_STDLIB_H' value='1'/>
<enum name='HAVE_STRCHR' value='1'/>
<enum name='HAVE_STRERROR' value='1'/>
<enum name='HAVE_STRINGS_H' value='1'/>
<enum name='HAVE_STRING_H' value='1'/>
<enum name='HAVE_STRLCAT' value='1'/>
<enum name='HAVE_STRLCPY' value='1'/>
<enum name='HAVE_STRSTR' value='1'/>
<enum name='HAVE_STRUCT_STAT_ST_ATIMESPEC' value='1'/>
<enum name='HAVE_STRUCT_STAT_ST_BLKSIZE' value='1'/>
<enum name='HAVE_STRUCT_STAT_ST_BLOCKS' value='1'/>
<enum name='HAVE_STRUCT_STAT_ST_CTIMESPEC' value='1'/>
<enum name='HAVE_STRUCT_STAT_ST_MTIMESPEC' value='1'/>
<enum name='HAVE_STRUCT_STAT_ST_RDEV' value='1'/>
<enum name='HAVE_STRUCT_TIMESPEC' value='1'/>
<enum name='HAVE_STRUCT_TIMEVAL' value='1'/>
<enum name='HAVE_STRUCT_TIMEZONE' value='1'/>
<enum name='HAVE_STRUCT_TM_TM_GMTOFF' value='1'/>
<enum name='HAVE_STRUCT_TM_TM_ZONE' value='1'/>
<enum name='HAVE_ST_BLKSIZE' value='1'/>
<enum name='HAVE_ST_BLOCKS' value='1'/>
<enum name='HAVE_ST_RDEV' value='1'/>
<enum name='HAVE_SYMLINK' value='1'/>
<enum name='HAVE_SYSCALL' value='1'/>
<enum name='HAVE_SYSCONF' value='1'/>
<enum name='HAVE_SYS_FCNTL_H' value='1'/>
<enum name='HAVE_SYS_FILE_H' value='1'/>
<enum name='HAVE_SYS_IOCTL_H' value='1'/>
<enum name='HAVE_SYS_PARAM_H' value='1'/>
<enum name='HAVE_SYS_RESOURCE_H' value='1'/>
<enum name='HAVE_SYS_SELECT_H' value='1'/>
<enum name='HAVE_SYS_SOCKET_H' value='1'/>
<enum name='HAVE_SYS_STAT_H' value='1'/>
<enum name='HAVE_SYS_SYSCALL_H' value='1'/>
<enum name='HAVE_SYS_TIMES_H' value='1'/>
<enum name='HAVE_SYS_TIME_H' value='1'/>
<enum name='HAVE_SYS_TYPES_H' value='1'/>
<enum name='HAVE_SYS_WAIT_H' value='1'/>
<enum name='HAVE_TANH' value='1'/>
<enum name='HAVE_TELLDIR' value='1'/>
<enum name='HAVE_TGAMMA' value='1'/>
<enum name='HAVE_TIMEGM' value='1'/>
<enum name='HAVE_TIMES' value='1'/>
<enum name='HAVE_TIMEZONE' value='1'/>
<enum name='HAVE_TIME_H' value='1'/>
<enum name='HAVE_TM_ZONE' value='1'/>
<enum name='HAVE_TRUNCATE' value='1'/>
<enum name='HAVE_TYPE_RB_DATA_TYPE_T' value='1'/>
<enum name='HAVE_UINT16_T' value='1'/>
<enum name='HAVE_UINT32_T' value='1'/>
<enum name='HAVE_UINT64_T' value='1'/>
<enum name='HAVE_UINT8_T' value='1'/>
<enum name='HAVE_UINTPTR_T' value='1'/>
<enum name='HAVE_UNISTD_H' value='1'/>
<enum name='HAVE_UNSETENV' value='1'/>
<enum name='HAVE_UTIMES' value='1'/>
<enum name='HAVE_UTIME_H' value='1'/>
<enum name='HAVE_VAR_TIMEZONE' value='1'/>
<enum name='HAVE_VA_ARGS_MACRO' value='1'/>
<enum name='HAVE_WAIT4' value='1'/>
<enum name='HAVE_WAITPID' value='1'/>
<enum name='HAVE__BOOL' value='1'/>
<enum name='HAVE__LONGJMP' value='1'/>
<enum name='HAVE__SC_CLK_TCK' value='1'/>
<enum name='HAVE__SETJMP' value='1'/>
<enum name='HAVE___SYSCALL' value='1'/>
<enum name='IMMEDIATE_MASK' value='3' value64='7'/>
<enum name='INCLUDE_RUBY_CONFIG_H' value='1'/>
<enum name='INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR' value='1073741824'/>
<enum name='MAX_CALLBACK' value='5'/>
<enum name='MAX_DLTYPE' value='9'/>
<enum name='NEGATIVE_TIME_T' value='1'/>
<enum name='NORETURN_STYLE_NEW' value='1'/>
<enum name='ONIGENC_CASE_FOLD_MIN' value='1073741824'/>
<enum name='ONIGENC_CASE_FOLD_TURKISH_AZERI' value='1048576'/>
<enum name='ONIGENC_CODE_TO_MBC_MAXLEN' value='7'/>
<enum name='ONIGENC_CTYPE_ALNUM' value='13'/>
<enum name='ONIGENC_CTYPE_ALPHA' value='1'/>
<enum name='ONIGENC_CTYPE_ASCII' value='14'/>
<enum name='ONIGENC_CTYPE_BLANK' value='2'/>
<enum name='ONIGENC_CTYPE_CNTRL' value='3'/>
<enum name='ONIGENC_CTYPE_DIGIT' value='4'/>
<enum name='ONIGENC_CTYPE_GRAPH' value='5'/>
<enum name='ONIGENC_CTYPE_LOWER' value='6'/>
<enum name='ONIGENC_CTYPE_NEWLINE' value='0'/>
<enum name='ONIGENC_CTYPE_PRINT' value='7'/>
<enum name='ONIGENC_CTYPE_PUNCT' value='8'/>
<enum name='ONIGENC_CTYPE_SPACE' value='9'/>
<enum name='ONIGENC_CTYPE_UPPER' value='10'/>
<enum name='ONIGENC_CTYPE_WORD' value='12'/>
<enum name='ONIGENC_CTYPE_XDIGIT' value='11'/>
<enum name='ONIGENC_FLAG_NONE' value='0'/>
<enum name='ONIGENC_FLAG_UNICODE' value='1'/>
<enum name='ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM' value='13'/>
<enum name='ONIGENC_MAX_COMP_CASE_FOLD_CODE_LEN' value='3'/>
<enum name='ONIGENC_MAX_STD_CTYPE' value='14'/>
<enum name='ONIGENC_MBC_CASE_FOLD_MAXLEN' value='18'/>
<enum name='ONIGERR_CHAR_CLASS_VALUE_AT_END_OF_RANGE' value='-110'/>
<enum name='ONIGERR_CHAR_CLASS_VALUE_AT_START_OF_RANGE' value='-111'/>
<enum name='ONIGERR_CONTROL_CODE_SYNTAX' value='-109'/>
<enum name='ONIGERR_DEFAULT_ENCODING_IS_NOT_SET' value='-21'/>
<enum name='ONIGERR_EMPTY_CHAR_CLASS' value='-102'/>
<enum name='ONIGERR_EMPTY_GROUP_NAME' value='-214'/>
<enum name='ONIGERR_EMPTY_RANGE_IN_CHAR_CLASS' value='-203'/>
<enum name='ONIGERR_END_PATTERN_AT_CONTROL' value='-106'/>
<enum name='ONIGERR_END_PATTERN_AT_ESCAPE' value='-104'/>
<enum name='ONIGERR_END_PATTERN_AT_LEFT_BRACE' value='-100'/>
<enum name='ONIGERR_END_PATTERN_AT_LEFT_BRACKET' value='-101'/>
<enum name='ONIGERR_END_PATTERN_AT_META' value='-105'/>
<enum name='ONIGERR_END_PATTERN_IN_GROUP' value='-118'/>
<enum name='ONIGERR_END_PATTERN_WITH_UNMATCHED_PARENTHESIS' value='-117'/>
<enum name='ONIGERR_GROUP_NUMBER_OVER_FOR_CAPTURE_HISTORY' value='-222'/>
<enum name='ONIGERR_INVALID_ARGUMENT' value='-30'/>
<enum name='ONIGERR_INVALID_BACKREF' value='-208'/>
<enum name='ONIGERR_INVALID_CHAR_IN_GROUP_NAME' value='-216'/>
<enum name='ONIGERR_INVALID_CHAR_PROPERTY_NAME' value='-223'/>
<enum name='ONIGERR_INVALID_CODE_POINT_VALUE' value='-400'/>
<enum name='ONIGERR_INVALID_COMBINATION_OF_OPTIONS' value='-403'/>
<enum name='ONIGERR_INVALID_CONDITION_PATTERN' value='-124'/>
<enum name='ONIGERR_INVALID_GROUP_NAME' value='-215'/>
<enum name='ONIGERR_INVALID_LOOK_BEHIND_PATTERN' value='-122'/>
<enum name='ONIGERR_INVALID_POSIX_BRACKET_TYPE' value='-121'/>
<enum name='ONIGERR_INVALID_REPEAT_RANGE_PATTERN' value='-123'/>
<enum name='ONIGERR_INVALID_WIDE_CHAR_VALUE' value='-400'/>
<enum name='ONIGERR_MATCH_STACK_LIMIT_OVER' value='-15'/>
<enum name='ONIGERR_MEMORY' value='-5'/>
<enum name='ONIGERR_META_CODE_SYNTAX' value='-108'/>
<enum name='ONIGERR_MISMATCH_CODE_LENGTH_IN_CLASS_RANGE' value='-204'/>
<enum name='ONIGERR_MULTIPLEX_DEFINED_NAME' value='-219'/>
<enum name='ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL' value='-220'/>
<enum name='ONIGERR_NESTED_REPEAT_OPERATOR' value='-115'/>
<enum name='ONIGERR_NEVER_ENDING_RECURSION' value='-221'/>
<enum name='ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION' value='-402'/>
<enum name='ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED' value='-209'/>
<enum name='ONIGERR_OVER_THREAD_PASS_LIMIT_COUNT' value='-1001'/>
<enum name='ONIGERR_PARSER_BUG' value='-11'/>
<enum name='ONIGERR_PREMATURE_END_OF_CHAR_CLASS' value='-103'/>
<enum name='ONIGERR_SPECIFIED_ENCODING_CANT_CONVERT_TO_WIDE_CHAR' value='-22'/>
<enum name='ONIGERR_STACK_BUG' value='-12'/>
<enum name='ONIGERR_TARGET_OF_REPEAT_OPERATOR_INVALID' value='-114'/>
<enum name='ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED' value='-113'/>
<enum name='ONIGERR_TOO_BIG_BACKREF_NUMBER' value='-207'/>
<enum name='ONIGERR_TOO_BIG_NUMBER' value='-200'/>
<enum name='ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE' value='-201'/>
<enum name='ONIGERR_TOO_BIG_WIDE_CHAR_VALUE' value='-401'/>
<enum name='ONIGERR_TOO_LONG_WIDE_CHAR_VALUE' value='-212'/>
<enum name='ONIGERR_TOO_MANY_MULTI_BYTE_RANGES' value='-205'/>
<enum name='ONIGERR_TOO_SHORT_DIGITS' value='-210'/>
<enum name='ONIGERR_TOO_SHORT_MULTI_BYTE_STRING' value='-206'/>
<enum name='ONIGERR_TYPE_BUG' value='-6'/>
<enum name='ONIGERR_UNDEFINED_BYTECODE' value='-13'/>
<enum name='ONIGERR_UNDEFINED_GROUP_OPTION' value='-119'/>
<enum name='ONIGERR_UNDEFINED_GROUP_REFERENCE' value='-218'/>
<enum name='ONIGERR_UNDEFINED_NAME_REFERENCE' value='-217'/>
<enum name='ONIGERR_UNEXPECTED_BYTECODE' value='-14'/>
<enum name='ONIGERR_UNMATCHED_CLOSE_PARENTHESIS' value='-116'/>
<enum name='ONIGERR_UNMATCHED_RANGE_SPECIFIER_IN_CHAR_CLASS' value='-112'/>
<enum name='ONIGERR_UPPER_SMALLER_THAN_LOWER_IN_REPEAT_RANGE' value='-202'/>
<enum name='ONIGURUMA_REGEX_H' value='1'/>
<enum name='ONIGURUMA_VERSION_MAJOR' value='5'/>
<enum name='ONIGURUMA_VERSION_MINOR' value='13'/>
<enum name='ONIGURUMA_VERSION_TEENY' value='5'/>
<enum name='ONIG_CHAR_TABLE_SIZE' value='256'/>
<enum name='ONIG_INEFFECTIVE_META_CHAR' value='0'/>
<enum name='ONIG_INFINITE_DISTANCE' value='4294967295' value64='18446744073709551615'/>
<enum name='ONIG_MAX_BACKREF_NUM' value='1000'/>
<enum name='ONIG_MAX_CAPTURE_HISTORY_GROUP' value='31'/>
<enum name='ONIG_MAX_ERROR_MESSAGE_LEN' value='90'/>
<enum name='ONIG_MAX_MULTI_BYTE_RANGES_NUM' value='10000'/>
<enum name='ONIG_MAX_REPEAT_NUM' value='100000'/>
<enum name='ONIG_META_CHAR_ANYCHAR' value='1'/>
<enum name='ONIG_META_CHAR_ANYCHAR_ANYTIME' value='5'/>
<enum name='ONIG_META_CHAR_ANYTIME' value='2'/>
<enum name='ONIG_META_CHAR_ESCAPE' value='0'/>
<enum name='ONIG_META_CHAR_ONE_OR_MORE_TIME' value='4'/>
<enum name='ONIG_META_CHAR_ZERO_OR_ONE_TIME' value='3'/>
<enum name='ONIG_MISMATCH' value='-1'/>
<enum name='ONIG_NORMAL' value='0'/>
<enum name='ONIG_NO_SUPPORT_CONFIG' value='-2'/>
<enum name='ONIG_NREGION' value='10'/>
<enum name='ONIG_OPTION_ASCII_RANGE' value='4096'/>
<enum name='ONIG_OPTION_CAPTURE_GROUP' value='256'/>
<enum name='ONIG_OPTION_DEFAULT' value='0'/>
<enum name='ONIG_OPTION_DONT_CAPTURE_GROUP' value='128'/>
<enum name='ONIG_OPTION_DOTALL' value='4'/>
<enum name='ONIG_OPTION_EXTEND' value='2'/>
<enum name='ONIG_OPTION_FIND_LONGEST' value='16'/>
<enum name='ONIG_OPTION_FIND_NOT_EMPTY' value='32'/>
<enum name='ONIG_OPTION_IGNORECASE' value='1'/>
<enum name='ONIG_OPTION_MAXBIT' value='32768'/>
<enum name='ONIG_OPTION_MULTILINE' value='4'/>
<enum name='ONIG_OPTION_NEGATE_SINGLELINE' value='64'/>
<enum name='ONIG_OPTION_NEWLINE_CRLF' value='32768'/>
<enum name='ONIG_OPTION_NONE' value='0'/>
<enum name='ONIG_OPTION_NOTBOL' value='512'/>
<enum name='ONIG_OPTION_NOTEOL' value='1024'/>
<enum name='ONIG_OPTION_POSIX_BRACKET_ALL_RANGE' value='8192'/>
<enum name='ONIG_OPTION_POSIX_REGION' value='2048'/>
<enum name='ONIG_OPTION_SINGLELINE' value='8'/>
<enum name='ONIG_OPTION_WORD_BOUND_ALL_RANGE' value='16384'/>
<enum name='ONIG_REGION_NOTPOS' value='-1'/>
<enum name='ONIG_STATE_COMPILING' value='-1'/>
<enum name='ONIG_STATE_MODIFY' value='-2'/>
<enum name='ONIG_STATE_NORMAL' value='0'/>
<enum name='ONIG_STATE_SEARCHING' value='1'/>
<enum name='ONIG_SYN_ALLOW_DOUBLE_RANGE_OP_IN_CC' value='8388608'/>
<enum name='ONIG_SYN_ALLOW_EMPTY_RANGE_IN_CC' value='4194304'/>
<enum name='ONIG_SYN_ALLOW_INTERVAL_LOW_ABBREV' value='16'/>
<enum name='ONIG_SYN_ALLOW_INVALID_INTERVAL' value='8'/>
<enum name='ONIG_SYN_ALLOW_MULTIPLEX_DEFINITION_NAME' value='256'/>
<enum name='ONIG_SYN_ALLOW_MULTIPLEX_DEFINITION_NAME_CALL' value='1024'/>
<enum name='ONIG_SYN_ALLOW_UNMATCHED_CLOSE_SUBEXP' value='4'/>
<enum name='ONIG_SYN_BACKSLASH_ESCAPE_IN_CC' value='2097152'/>
<enum name='ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP' value='128'/>
<enum name='ONIG_SYN_CONTEXT_INDEP_ANCHORS' value='2147483648'/>
<enum name='ONIG_SYN_CONTEXT_INDEP_REPEAT_OPS' value='1'/>
<enum name='ONIG_SYN_CONTEXT_INVALID_REPEAT_OPS' value='2'/>
<enum name='ONIG_SYN_DIFFERENT_LEN_ALT_LOOK_BEHIND' value='64'/>
<enum name='ONIG_SYN_FIXED_INTERVAL_IS_GREEDY_ONLY' value='512'/>
<enum name='ONIG_SYN_NOT_NEWLINE_IN_NEGATIVE_CC' value='1048576'/>
<enum name='ONIG_SYN_OP2_ATMARK_CAPTURE_HISTORY' value='1024'/>
<enum name='ONIG_SYN_OP2_CCLASS_SET_OP' value='64'/>
<enum name='ONIG_SYN_OP2_ESC_CAPITAL_C_BAR_CONTROL' value='2048'/>
<enum name='ONIG_SYN_OP2_ESC_CAPITAL_K_KEEP' value='33554432'/>
<enum name='ONIG_SYN_OP2_ESC_CAPITAL_M_BAR_META' value='4096'/>
<enum name='ONIG_SYN_OP2_ESC_CAPITAL_Q_QUOTE' value='1'/>
<enum name='ONIG_SYN_OP2_ESC_CAPITAL_R_LINEBREAK' value='2097152'/>
<enum name='ONIG_SYN_OP2_ESC_CAPITAL_X_EXTENDED_GRAPHEME_CLUSTER' value='4194304'/>
<enum name='ONIG_SYN_OP2_ESC_GNU_BUF_ANCHOR' value='32768'/>
<enum name='ONIG_SYN_OP2_ESC_G_BRACE_BACKREF' value='67108864'/>
<enum name='ONIG_SYN_OP2_ESC_G_SUBEXP_CALL' value='512'/>
<enum name='ONIG_SYN_OP2_ESC_H_HORIZONTAL_WHITESPACE' value='16777216'/>
<enum name='ONIG_SYN_OP2_ESC_H_XDIGIT' value='524288'/>
<enum name='ONIG_SYN_OP2_ESC_K_NAMED_BACKREF' value='256'/>
<enum name='ONIG_SYN_OP2_ESC_P_BRACE_CHAR_PROPERTY' value='65536'/>
<enum name='ONIG_SYN_OP2_ESC_P_BRACE_CIRCUMFLEX_NOT' value='131072'/>
<enum name='ONIG_SYN_OP2_ESC_U_HEX4' value='16384'/>
<enum name='ONIG_SYN_OP2_ESC_V_VERTICAL_WHITESPACE' value='8388608'/>
<enum name='ONIG_SYN_OP2_ESC_V_VTAB' value='8192'/>
<enum name='ONIG_SYN_OP2_INEFFECTIVE_ESCAPE' value='1048576'/>
<enum name='ONIG_SYN_OP2_OPTION_JAVA' value='2147483648'/>
<enum name='ONIG_SYN_OP2_OPTION_PERL' value='4'/>
<enum name='ONIG_SYN_OP2_OPTION_RUBY' value='8'/>
<enum name='ONIG_SYN_OP2_PLUS_POSSESSIVE_INTERVAL' value='32'/>
<enum name='ONIG_SYN_OP2_PLUS_POSSESSIVE_REPEAT' value='16'/>
<enum name='ONIG_SYN_OP2_QMARK_CAPITAL_P_NAMED_GROUP' value='1073741824'/>
<enum name='ONIG_SYN_OP2_QMARK_GROUP_EFFECT' value='2'/>
<enum name='ONIG_SYN_OP2_QMARK_LPAREN_CONDITION' value='536870912'/>
<enum name='ONIG_SYN_OP2_QMARK_LT_NAMED_GROUP' value='128'/>
<enum name='ONIG_SYN_OP2_QMARK_SUBEXP_CALL' value='134217728'/>
<enum name='ONIG_SYN_OP2_QMARK_VBAR_BRANCH_RESET' value='268435456'/>
<enum name='ONIG_SYN_OP_ASTERISK_ZERO_INF' value='4'/>
<enum name='ONIG_SYN_OP_BRACE_INTERVAL' value='256'/>
<enum name='ONIG_SYN_OP_BRACKET_CC' value='131072'/>
<enum name='ONIG_SYN_OP_DECIMAL_BACKREF' value='65536'/>
<enum name='ONIG_SYN_OP_DOT_ANYCHAR' value='2'/>
<enum name='ONIG_SYN_OP_ESC_ASTERISK_ZERO_INF' value='8'/>
<enum name='ONIG_SYN_OP_ESC_AZ_BUF_ANCHOR' value='16384'/>
<enum name='ONIG_SYN_OP_ESC_BRACE_INTERVAL' value='512'/>
<enum name='ONIG_SYN_OP_ESC_B_WORD_BOUND' value='1048576'/>
<enum name='ONIG_SYN_OP_ESC_CAPITAL_G_BEGIN_ANCHOR' value='32768'/>
<enum name='ONIG_SYN_OP_ESC_CONTROL_CHARS' value='67108864'/>
<enum name='ONIG_SYN_OP_ESC_C_CONTROL' value='134217728'/>
<enum name='ONIG_SYN_OP_ESC_D_DIGIT' value='4194304'/>
<enum name='ONIG_SYN_OP_ESC_LPAREN_SUBEXP' value='8192'/>
<enum name='ONIG_SYN_OP_ESC_LTGT_WORD_BEGIN_END' value='524288'/>
<enum name='ONIG_SYN_OP_ESC_OCTAL3' value='268435456'/>
<enum name='ONIG_SYN_OP_ESC_O_BRACE_OCTAL' value='2147483648'/>
<enum name='ONIG_SYN_OP_ESC_PLUS_ONE_INF' value='32'/>
<enum name='ONIG_SYN_OP_ESC_QMARK_ZERO_ONE' value='128'/>
<enum name='ONIG_SYN_OP_ESC_S_WHITE_SPACE' value='2097152'/>
<enum name='ONIG_SYN_OP_ESC_VBAR_ALT' value='2048'/>
<enum name='ONIG_SYN_OP_ESC_W_WORD' value='262144'/>
<enum name='ONIG_SYN_OP_ESC_X_BRACE_HEX8' value='1073741824'/>
<enum name='ONIG_SYN_OP_ESC_X_HEX2' value='536870912'/>
<enum name='ONIG_SYN_OP_LINE_ANCHOR' value='8388608'/>
<enum name='ONIG_SYN_OP_LPAREN_SUBEXP' value='4096'/>
<enum name='ONIG_SYN_OP_PLUS_ONE_INF' value='16'/>
<enum name='ONIG_SYN_OP_POSIX_BRACKET' value='16777216'/>
<enum name='ONIG_SYN_OP_QMARK_NON_GREEDY' value='33554432'/>
<enum name='ONIG_SYN_OP_QMARK_ZERO_ONE' value='64'/>
<enum name='ONIG_SYN_OP_VARIABLE_META_CHARACTERS' value='1'/>
<enum name='ONIG_SYN_OP_VBAR_ALT' value='1024'/>
<enum name='ONIG_SYN_STRICT_CHECK_BACKREF' value='32'/>
<enum name='ONIG_SYN_WARN_CC_DUP' value='67108864'/>
<enum name='ONIG_SYN_WARN_CC_OP_NOT_ESCAPED' value='16777216'/>
<enum name='ONIG_SYN_WARN_REDUNDANT_NESTED_REPEAT' value='33554432'/>
<enum name='ONIG_TRAVERSE_CALLBACK_AT_BOTH' value='3'/>
<enum name='ONIG_TRAVERSE_CALLBACK_AT_FIRST' value='1'/>
<enum name='ONIG_TRAVERSE_CALLBACK_AT_LAST' value='2'/>
<enum name='POSIX_SIGNAL' value='1'/>
<enum name='Qfalse' value='0'/>
<enum name='Qnil' value='4' value64='8'/>
<enum name='Qtrue' value='2' value64='20'/>
<enum name='Qundef' value='6' value64='52'/>
<enum name='RARRAY_EMBED_FLAG' value='8192'/>
<enum name='RARRAY_EMBED_LEN_MASK' value='98304'/>
<enum name='RARRAY_EMBED_LEN_MAX' value='3'/>
<enum name='RARRAY_EMBED_LEN_SHIFT' value='15'/>
<enum name='RBIGNUM_EMBED_FLAG' value='16384'/>
<enum name='RBIGNUM_EMBED_LEN_MASK' value='229376'/>
<enum name='RBIGNUM_EMBED_LEN_MAX' value='3' value64='6'/>
<enum name='RBIGNUM_EMBED_LEN_SHIFT' value='15'/>
<enum name='RBIGNUM_SIGN_BIT' value='8192'/>
<enum name='RB_DEBUG_H' value='1'/>
<enum name='RB_EVENT_HOOKS_HAVE_CALLBACK_DATA' value='1'/>
<enum name='RB_NUM_COERCE_FUNCS_NEED_OPID' value='1'/>
<enum name='RB_WAITFD_IN' value='1'/>
<enum name='RB_WAITFD_OUT' value='4'/>
<enum name='RB_WAITFD_PRI' value='2'/>
<enum name='RMODULE_INCLUDED_INTO_REFINEMENT' value='65536'/>
<enum name='RMODULE_IS_OVERLAID' value='16384'/>
<enum name='RMODULE_IS_REFINEMENT' value='32768'/>
<enum name='ROBJECT_EMBED' value='8192'/>
<enum name='ROBJECT_EMBED_LEN_MAX' value='3'/>
<enum name='RSTRING_EMBED_LEN_MASK' value='507904'/>
<enum name='RSTRING_EMBED_LEN_MAX' value='11' value64='23'/>
<enum name='RSTRING_EMBED_LEN_SHIFT' value='14'/>
<enum name='RSTRING_NOEMBED' value='8192'/>
<enum name='RSTRUCT_EMBED_LEN_MASK' value='24576'/>
<enum name='RSTRUCT_EMBED_LEN_MAX' value='3'/>
<enum name='RSTRUCT_EMBED_LEN_SHIFT' value='13'/>
<enum name='RUBY_API_VERSION_CODE' value='20000'/>
<enum name='RUBY_API_VERSION_MAJOR' value='2'/>
<enum name='RUBY_API_VERSION_MINOR' value='0'/>
<enum name='RUBY_API_VERSION_TEENY' value='0'/>
<enum name='RUBY_BIRTH_DAY' value='24'/>
<enum name='RUBY_BIRTH_MONTH' value='2'/>
<enum name='RUBY_BIRTH_YEAR' value='1993'/>
<enum name='RUBY_CALL_WO_GVL_FLAG_SKIP_CHECK_INTS_AFTER' value='1'/>
<enum name='RUBY_DEFINES_H' value='1'/>
<enum name='RUBY_DIGEST_API_VERSION' value='2'/>
<enum name='RUBY_ENCODING_H' value='1'/>
<enum name='RUBY_EVENT_ALL' value='255'/>
<enum name='RUBY_EVENT_B_CALL' value='256'/>
<enum name='RUBY_EVENT_B_RETURN' value='512'/>
<enum name='RUBY_EVENT_CALL' value='8'/>
<enum name='RUBY_EVENT_CLASS' value='2'/>
<enum name='RUBY_EVENT_COVERAGE' value='262144'/>
<enum name='RUBY_EVENT_C_CALL' value='32'/>
<enum name='RUBY_EVENT_C_RETURN' value='64'/>
<enum name='RUBY_EVENT_END' value='4'/>
<enum name='RUBY_EVENT_HOOK_FLAG_DELETED' value='2'/>
<enum name='RUBY_EVENT_HOOK_FLAG_RAW_ARG' value='4'/>
<enum name='RUBY_EVENT_HOOK_FLAG_SAFE' value='1'/>
<enum name='RUBY_EVENT_LINE' value='1'/>
<enum name='RUBY_EVENT_NONE' value='0'/>
<enum name='RUBY_EVENT_RAISE' value='128'/>
<enum name='RUBY_EVENT_RETURN' value='16'/>
<enum name='RUBY_EVENT_SPECIFIED_LINE' value='65536'/>
<enum name='RUBY_EVENT_SWITCH' value='131072'/>
<enum name='RUBY_EVENT_THREAD_BEGIN' value='1024'/>
<enum name='RUBY_EVENT_THREAD_END' value='2048'/>
<enum name='RUBY_EVENT_TRACEPOINT_ALL' value='65535'/>
<enum name='RUBY_FIXNUM_FLAG' value='1'/>
<enum name='RUBY_FLONUM_FLAG' value='2'/>
<enum name='RUBY_FLONUM_MASK' value='0' value64='3'/>
<enum name='RUBY_H' value='1'/>
<enum name='RUBY_IMMEDIATE_MASK' value='3' value64='7'/>
<enum name='RUBY_INTERN_H' value='1'/>
<enum name='RUBY_IO_H' value='1'/>
<enum name='RUBY_MBCHAR_MAXSIZE' value='2147483647'/>
<enum name='RUBY_MISSING_H' value='1'/>
<enum name='RUBY_Qfalse' value='0'/>
<enum name='RUBY_Qnil' value='4' value64='8'/>
<enum name='RUBY_Qtrue' value='2' value64='20'/>
<enum name='RUBY_Qundef' value='6' value64='52'/>
<enum name='RUBY_RE_H' value='1'/>
<enum name='RUBY_RUBY_H' value='1'/>
<enum name='RUBY_SPECIAL_SHIFT' value='8'/>
<enum name='RUBY_ST_H' value='1'/>
<enum name='RUBY_SUBST_H' value='1'/>
<enum name='RUBY_SYMBOL_FLAG' value='14' value64='12'/>
<enum name='RUBY_THREAD_H' value='1'/>
<enum name='RUBY_T_ARRAY' value='7'/>
<enum name='RUBY_T_BIGNUM' value='10'/>
<enum name='RUBY_T_CLASS' value='2'/>
<enum name='RUBY_T_COMPLEX' value='14'/>
<enum name='RUBY_T_DATA' value='12'/>
<enum name='RUBY_T_FALSE' value='19'/>
<enum name='RUBY_T_FILE' value='11'/>
<enum name='RUBY_T_FIXNUM' value='21'/>
<enum name='RUBY_T_FLOAT' value='4'/>
<enum name='RUBY_T_HASH' value='8'/>
<enum name='RUBY_T_ICLASS' value='29'/>
<enum name='RUBY_T_MASK' value='31'/>
<enum name='RUBY_T_MATCH' value='13'/>
<enum name='RUBY_T_MODULE' value='3'/>
<enum name='RUBY_T_NIL' value='17'/>
<enum name='RUBY_T_NODE' value='28'/>
<enum name='RUBY_T_NONE' value='0'/>
<enum name='RUBY_T_OBJECT' value='1'/>
<enum name='RUBY_T_RATIONAL' value='15'/>
<enum name='RUBY_T_REGEXP' value='6'/>
<enum name='RUBY_T_STRING' value='5'/>
<enum name='RUBY_T_STRUCT' value='9'/>
<enum name='RUBY_T_SYMBOL' value='20'/>
<enum name='RUBY_T_TRUE' value='18'/>
<enum name='RUBY_T_UNDEF' value='27'/>
<enum name='RUBY_T_ZOMBIE' value='30'/>
<enum name='RUBY_UTIL_H' value='1'/>
<enum name='RUBY_VERSION_H' value='1'/>
<enum name='RUBY_VM' value='1'/>
<enum name='RUBY_VM_H' value='1'/>
<enum name='SIZEOF_BDIGITS' value='4'/>
<enum name='SIZEOF_DOUBLE' value='8'/>
<enum name='SIZEOF_FLOAT' value='4'/>
<enum name='SIZEOF_INT' value='4'/>
<enum name='SIZEOF_INT16_T' value='2'/>
<enum name='SIZEOF_INT32_T' value='4'/>
<enum name='SIZEOF_INT64_T' value='8'/>
<enum name='SIZEOF_INT8_T' value='1'/>
<enum name='SIZEOF_INTPTR_T' value='4' value64='8'/>
<enum name='SIZEOF_LONG' value='4' value64='8'/>
<enum name='SIZEOF_LONG_LONG' value='8'/>
<enum name='SIZEOF_OFF_T' value='8'/>
<enum name='SIZEOF_PTRDIFF_T' value='4' value64='8'/>
<enum name='SIZEOF_SHORT' value='2'/>
<enum name='SIZEOF_SIZE_T' value='4' value64='8'/>
<enum name='SIZEOF_SSIZE_T' value='4' value64='8'/>
<enum name='SIZEOF_STRUCT_STAT_ST_BLOCKS' value='8'/>
<enum name='SIZEOF_STRUCT_STAT_ST_INO' value='8'/>
<enum name='SIZEOF_STRUCT_STAT_ST_SIZE' value='8'/>
<enum name='SIZEOF_ST_INDEX_T' value='4' value64='8'/>
<enum name='SIZEOF_TIME_T' value='4' value64='8'/>
<enum name='SIZEOF_UINT16_T' value='2'/>
<enum name='SIZEOF_UINT32_T' value='4'/>
<enum name='SIZEOF_UINT64_T' value='8'/>
<enum name='SIZEOF_UINT8_T' value='1'/>
<enum name='SIZEOF_UINTPTR_T' value='4' value64='8'/>
<enum name='SIZEOF_VALUE' value='4' value64='8'/>
<enum name='SIZEOF_VOIDP' value='4' value64='8'/>
<enum name='SIZEOF___INT64' value='0'/>
<enum name='STACK_GROW_DIRECTION' value='-1'/>
<enum name='STDC_HEADERS' value='1'/>
<enum name='ST_CHECK' value='3'/>
<enum name='ST_CONTINUE' value='0'/>
<enum name='ST_DELETE' value='2'/>
<enum name='ST_INDEX_BITS' value='32' value64='64'/>
<enum name='ST_STOP' value='1'/>
<enum name='SYMBOL_FLAG' value='14' value64='12'/>
<enum name='TIMEZONE_VOID' value='1'/>
<enum name='T_ARRAY' value='7'/>
<enum name='T_BIGNUM' value='10'/>
<enum name='T_CLASS' value='2'/>
<enum name='T_COMPLEX' value='14'/>
<enum name='T_DATA' value='12'/>
<enum name='T_FALSE' value='19'/>
<enum name='T_FILE' value='11'/>
<enum name='T_FIXNUM' value='21'/>
<enum name='T_FLOAT' value='4'/>
<enum name='T_HASH' value='8'/>
<enum name='T_ICLASS' value='29'/>
<enum name='T_MASK' value='31'/>
<enum name='T_MATCH' value='13'/>
<enum name='T_MODULE' value='3'/>
<enum name='T_NIL' value='17'/>
<enum name='T_NODE' value='28'/>
<enum name='T_NONE' value='0'/>
<enum name='T_OBJECT' value='1'/>
<enum name='T_RATIONAL' value='15'/>
<enum name='T_REGEXP' value='6'/>
<enum name='T_STRING' value='5'/>
<enum name='T_STRUCT' value='9'/>
<enum name='T_SYMBOL' value='20'/>
<enum name='T_TRUE' value='18'/>
<enum name='T_UNDEF' value='27'/>
<enum name='T_ZOMBIE' value='30'/>
<enum name='UNLIMITED_ARGUMENTS' value='-1'/>
<enum name='USE_FLONUM' value='0' value64='1'/>
<enum name='USE_SYMBOL_AS_METHOD_NAME' value='1'/>
<enum name='econv_after_output' value='5'/>
<enum name='econv_destination_buffer_full' value='2'/>
<enum name='econv_finished' value='4'/>
<enum name='econv_incomplete_input' value='6'/>
<enum name='econv_invalid_byte_sequence' value='0'/>
<enum name='econv_source_buffer_empty' value='3'/>
<enum name='econv_undefined_conversion' value='1'/>
<function name='eaccess'>
<arg type='*'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='onig_capture_tree_traverse'>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<arg type='i'/>
<arg function_pointer='true' type='^?'>
<arg type='i'/>
<arg type='i' type64='q'/>
<arg type='i' type64='q'/>
<arg type='i'/>
<arg type='i'/>
<arg type='^v'/>
<retval type='i'/>
</arg>
<arg type='^v'/>
<retval type='i'/>
</function>
<function name='onig_copy_encoding'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='onig_copy_syntax'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
</function>
<function name='onig_copyright'>
<retval type='*'/>
</function>
<function name='onig_end'>
<retval type='i'/>
</function>
<function name='onig_error_code_to_str' variadic='true'>
<arg type='*'/>
<arg type='i' type64='q'/>
<retval type='i'/>
</function>
<function name='onig_foreach_name'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg function_pointer='true' type='^?'>
<arg type='*'/>
<arg type='*'/>
<arg type='i'/>
<arg type='^i'/>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg type='^v'/>
<retval type='i'/>
</arg>
<arg type='^v'/>
<retval type='i'/>
</function>
<function name='onig_free'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
</function>
<function name='onig_free_body'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
</function>
<function name='onig_get_capture_tree'>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<retval type='^{OnigCaptureTreeNodeStruct=iiiii^^{OnigCaptureTreeNodeStruct}}' type64='^{OnigCaptureTreeNodeStruct=iqqii^^{OnigCaptureTreeNodeStruct}}'/>
</function>
<function name='onig_get_case_fold_flag'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<retval type='I'/>
</function>
<function name='onig_get_default_case_fold_flag'>
<retval type='I'/>
</function>
<function name='onig_get_encoding'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='onig_get_match_stack_limit_size'>
<retval type='I'/>
</function>
<function name='onig_get_options'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<retval type='I'/>
</function>
<function name='onig_get_syntax'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<retval type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
</function>
<function name='onig_get_syntax_behavior'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<retval type='I'/>
</function>
<function name='onig_get_syntax_op'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<retval type='I'/>
</function>
<function name='onig_get_syntax_op2'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<retval type='I'/>
</function>
<function name='onig_get_syntax_options'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<retval type='I'/>
</function>
<function name='onig_init'>
<retval type='i'/>
</function>
<function name='onig_match'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<arg type='I'/>
<retval type='i' type64='q'/>
</function>
<function name='onig_name_to_backref_number'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<retval type='i'/>
</function>
<function name='onig_name_to_group_numbers'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='^^i'/>
<retval type='i'/>
</function>
<function name='onig_new'>
<arg type='^^{re_pattern_buffer}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='I'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<arg type='^{_OnigErrorInfo=^{OnigEncodingTypeST}**}'/>
<retval type='i'/>
</function>
<function name='onig_new_deluxe'>
<arg type='^^{re_pattern_buffer}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='^{_OnigCompileInfo=i^{OnigEncodingTypeST}^{OnigEncodingTypeST}^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}II}'/>
<arg type='^{_OnigErrorInfo=^{OnigEncodingTypeST}**}'/>
<retval type='i'/>
</function>
<function name='onig_new_without_alloc'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='I'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<arg type='^{_OnigErrorInfo=^{OnigEncodingTypeST}**}'/>
<retval type='i'/>
</function>
<function name='onig_noname_group_capture_is_active'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<retval type='i'/>
</function>
<function name='onig_null_warn'>
<arg type='*'/>
</function>
<function name='onig_number_of_capture_histories'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<retval type='i'/>
</function>
<function name='onig_number_of_captures'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<retval type='i'/>
</function>
<function name='onig_number_of_names'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<retval type='i'/>
</function>
<function name='onig_recompile'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='I'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<arg type='^{_OnigErrorInfo=^{OnigEncodingTypeST}**}'/>
<retval type='i'/>
</function>
<function name='onig_recompile_deluxe'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='^{_OnigCompileInfo=i^{OnigEncodingTypeST}^{OnigEncodingTypeST}^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}II}'/>
<arg type='^{_OnigErrorInfo=^{OnigEncodingTypeST}**}'/>
<retval type='i'/>
</function>
<function name='onig_reg_init'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg type='I'/>
<arg type='I'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<retval type='i'/>
</function>
<function name='onig_region_clear'>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
</function>
<function name='onig_region_copy'>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
</function>
<function name='onig_region_free'>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<arg type='i'/>
</function>
<function name='onig_region_init'>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
</function>
<function name='onig_region_new'>
<retval type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
</function>
<function name='onig_region_resize'>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='onig_region_set'>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<arg type='i'/>
<arg type='i'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='onig_search'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<arg type='I'/>
<retval type='i' type64='q'/>
</function>
<function name='onig_search_gpos'>
<arg type='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{?}^{OnigEncodingTypeST}I^{?}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<arg type='I'/>
<retval type='i' type64='q'/>
</function>
<function name='onig_set_default_case_fold_flag'>
<arg type='I'/>
<retval type='i'/>
</function>
<function name='onig_set_default_syntax'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<retval type='i'/>
</function>
<function name='onig_set_match_stack_limit_size'>
<arg type='I'/>
<retval type='i'/>
</function>
<function name='onig_set_meta_char'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<arg type='I'/>
<arg type='I'/>
<retval type='i'/>
</function>
<function name='onig_set_syntax_behavior'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<arg type='I'/>
</function>
<function name='onig_set_syntax_op'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<arg type='I'/>
</function>
<function name='onig_set_syntax_op2'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<arg type='I'/>
</function>
<function name='onig_set_syntax_options'>
<arg type='^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}'/>
<arg type='I'/>
</function>
<function name='onig_set_verb_warn_func'>
<arg function_pointer='true' type='^?'>
<arg type='*'/>
<retval type='v'/>
</arg>
</function>
<function name='onig_set_warn_func'>
<arg function_pointer='true' type='^?'>
<arg type='*'/>
<retval type='v'/>
</arg>
</function>
<function name='onig_version'>
<retval type='*'/>
</function>
<function name='onigenc_get_default_encoding'>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='onigenc_get_left_adjust_char_head'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<retval type='*'/>
</function>
<function name='onigenc_get_prev_char_head'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<retval type='*'/>
</function>
<function name='onigenc_get_right_adjust_char_head'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<retval type='*'/>
</function>
<function name='onigenc_get_right_adjust_char_head_with_prev'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<arg type='^*'/>
<retval type='*'/>
</function>
<function name='onigenc_init'>
<retval type='i'/>
</function>
<function name='onigenc_mbclen_approximate'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='onigenc_set_default_caseconv_table'>
<arg type='*'/>
</function>
<function name='onigenc_set_default_encoding'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='onigenc_step_back'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<arg type='i'/>
<retval type='*'/>
</function>
<function name='onigenc_str_bytelen_null'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='onigenc_strlen'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='*'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='onigenc_strlen_null'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_Array'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_Complex'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_Float'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_Hash'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_Integer'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_Rational'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_String'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_add_event_hook'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='v'/>
</arg>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_add_event_hook2'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='v'/>
</arg>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
</function>
<function name='rb_alias'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_alias_variable'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_alloc_tmp_buffer'>
<arg type='^I' type64='^Q'/>
<arg type='l' type64='q'/>
<retval type='^v'/>
</function>
<function name='rb_any_to_s'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_apply'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_aref'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_assoc'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_clear'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_cmp'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_concat'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_delete'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_delete_at'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_dup'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_each'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_entry'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_free'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_ary_freeze'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_includes'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_join'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_modify'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_ary_new'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_new2'>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_new3' variadic='true'>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_new4'>
<arg type='l' type64='q'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_plus'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_pop'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_push'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_rassoc'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_replace'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_resize'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_resurrect'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_reverse'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_rotate'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_shared_with_p'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_shift'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_sort'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_sort_bang'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_store'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_ary_subseq'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_tmp_new'>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_to_ary'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_to_s'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ary_unshift'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ascii8bit_encindex'>
<retval type='i'/>
</function>
<function name='rb_ascii8bit_encoding'>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_assoc_new'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_attr'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='i'/>
<arg type='i'/>
</function>
<function name='rb_attr_get'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_autoload'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='*'/>
</function>
<function name='rb_autoload_load'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_autoload_p'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_backref_get'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_backref_set'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_backtrace'/>
<function name='rb_big2dbl'>
<arg type='L' type64='Q'/>
<retval type='d'/>
</function>
<function name='rb_big2ll'>
<arg type='L' type64='Q'/>
<retval type='q'/>
</function>
<function name='rb_big2long'>
<arg type='L' type64='Q'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_big2str'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big2str0'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big2ull'>
<arg type='L' type64='Q'/>
<retval type='Q'/>
</function>
<function name='rb_big2ulong'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big2ulong_pack'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_2comp'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_big_and'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_clone'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_cmp'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_div'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_divmod'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_eq'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_eql'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_idiv'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_lshift'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_minus'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_modulo'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_mul'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_new'>
<arg type='l' type64='q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_norm'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_or'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_pack'>
<arg type='L' type64='Q'/>
<arg type='^L' type64='^Q'/>
<arg type='l' type64='q'/>
</function>
<function name='rb_big_plus'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_pow'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_resize'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
</function>
<function name='rb_big_rshift'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_unpack'>
<arg type='^L' type64='^Q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_big_xor'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_bigzero_p'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_binding_new'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_block_call'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_block_given_p'>
<retval type='i'/>
</function>
<function name='rb_block_lambda'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_block_proc'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_bug' variadic='true'>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_bug_errno'>
<arg type='*'/>
<arg type='i'/>
</function>
<function name='rb_call_super'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_catch'>
<arg type='*'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_catch_obj'>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_char_to_option_kcode'>
<arg type='i'/>
<arg type='^i'/>
<arg type='^i'/>
<retval type='i'/>
</function>
<function name='rb_check_array_type'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_check_convert_type'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='*'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_check_copyable'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_check_frozen'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_check_funcall'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_check_hash_type'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_check_id'>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_check_id_cstr'>
<arg type='*'/>
<arg type='l' type64='q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_check_inheritable'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_check_safe_obj'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_check_safe_str'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_check_string_type'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_check_to_float'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_check_to_int'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_check_to_integer'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_check_trusted'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_check_type'>
<arg type='L' type64='Q'/>
<arg type='i'/>
</function>
<function name='rb_check_typeddata'>
<arg type='L' type64='Q'/>
<arg type='^{rb_data_type_struct=*{?=^?^?^?[2^v]}^{rb_data_type_struct}^v}'/>
<retval type='^v'/>
</function>
<function name='rb_class2name'>
<arg type='L' type64='Q'/>
<retval type='*'/>
</function>
<function name='rb_class_boot'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_get_superclass'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_inherited'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_inherited_p'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_instance_methods'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_name'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_new'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_new_instance'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function inline='true' name='rb_class_of'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_path'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_private_instance_methods'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_protected_instance_methods'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_public_instance_methods'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_real'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_class_superclass'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_clear_cache'/>
<function name='rb_clear_cache_by_class'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_cloexec_dup'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_cloexec_dup2'>
<arg type='i'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_cloexec_fcntl_dupfd'>
<arg type='i'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_cloexec_open'>
<arg type='*'/>
<arg type='i'/>
<arg type='S'/>
<retval type='i'/>
</function>
<function name='rb_cloexec_pipe'>
<arg type='^i'/>
<retval type='i'/>
</function>
<function name='rb_close_before_exec'>
<arg type='i'/>
<arg type='i'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_cmperr'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_cmpint'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_compile_error' variadic='true'>
<arg type='*'/>
<arg type='i'/>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_compile_error_append' variadic='true'>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_compile_error_with_enc' variadic='true'>
<arg type='*'/>
<arg type='i'/>
<arg type='^v'/>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_compile_warn' variadic='true'>
<arg type='*'/>
<arg type='i'/>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_compile_warning' variadic='true'>
<arg type='*'/>
<arg type='i'/>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_complex_new'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_complex_polar'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_complex_raw'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_const_defined'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_const_defined_at'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_const_defined_from'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_const_get'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_const_get_at'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_const_get_from'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_const_list'>
<arg type='^v'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_const_remove'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_const_set'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_convert_type'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='*'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_copy_generic_ivar'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_cstr2inum'>
<arg type='*'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_cstr_to_dbl'>
<arg type='*'/>
<arg type='i'/>
<retval type='d'/>
</function>
<function name='rb_cstr_to_inum'>
<arg type='*'/>
<arg type='i'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_cv_get'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_cv_set'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_cvar_defined'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_cvar_get'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_cvar_set'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_data_object_alloc'>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='v'/>
</arg>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='v'/>
</arg>
<retval type='L' type64='Q'/>
</function>
<function name='rb_data_typed_object_alloc'>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg type='^{rb_data_type_struct=*{?=^?^?^?[2^v]}^{rb_data_type_struct}^v}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_dbl2big'>
<arg type='d'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_dbl_cmp'>
<arg type='d'/>
<arg type='d'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_debug_inspector_backtrace_locations'>
<arg type='^{rb_debug_inspector_struct=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_debug_inspector_frame_binding_get'>
<arg type='^{rb_debug_inspector_struct=}'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_debug_inspector_frame_class_get'>
<arg type='^{rb_debug_inspector_struct=}'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_debug_inspector_frame_iseq_get'>
<arg type='^{rb_debug_inspector_struct=}'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_debug_inspector_frame_self_get'>
<arg type='^{rb_debug_inspector_struct=}'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_debug_inspector_open'>
<arg function_pointer='true' type='^?'>
<arg type='^{rb_debug_inspector_struct=}'/>
<arg type='^v'/>
<retval type='L' type64='Q'/>
</arg>
<arg type='^v'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_default_external_encoding'>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_default_internal_encoding'>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_define_alias'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='*'/>
</function>
<function name='rb_define_alloc_func'>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</arg>
</function>
<function name='rb_define_attr'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='i'/>
<arg type='i'/>
</function>
<function name='rb_define_class'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_define_class_id'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_define_class_id_under'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_define_class_under'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_define_class_variable'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_define_const'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_define_dummy_encoding'>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_define_global_const'>
<arg type='*'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_define_global_function'>
<arg type='*'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='i'/>
</function>
<function name='rb_define_hooked_variable'>
<arg type='*'/>
<arg type='^I' type64='^Q'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg function_pointer='true' type='^?'>
<retval type='v'/>
</arg>
</function>
<function name='rb_define_method'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='i'/>
</function>
<function name='rb_define_method_id'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='i'/>
</function>
<function name='rb_define_module'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_define_module_function'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='i'/>
</function>
<function name='rb_define_module_id'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_define_module_id_under'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_define_module_under'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_define_private_method'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='i'/>
</function>
<function name='rb_define_protected_method'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='i'/>
</function>
<function name='rb_define_readonly_variable'>
<arg type='*'/>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_define_singleton_method'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='i'/>
</function>
<function name='rb_define_variable'>
<arg type='*'/>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_define_virtual_variable'>
<arg type='*'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg function_pointer='true' type='^?'>
<retval type='v'/>
</arg>
</function>
<function name='rb_detach_process'>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_dir_getwd'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_dlcfunc_kind_p'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_dlcfunc_new'>
<arg function_pointer='true' type='^?'>
<retval type='v'/>
</arg>
<arg type='i'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_dlptr_malloc'>
<arg type='l' type64='q'/>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='v'/>
</arg>
<retval type='L' type64='Q'/>
</function>
<function name='rb_dlptr_new'>
<arg type='^v'/>
<arg type='l' type64='q'/>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='v'/>
</arg>
<retval type='L' type64='Q'/>
</function>
<function name='rb_dlptr_new2'>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg type='l' type64='q'/>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='v'/>
</arg>
<retval type='L' type64='Q'/>
</function>
<function name='rb_during_gc'>
<retval type='i'/>
</function>
<function name='rb_each'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_econv_asciicompat_encoding'>
<arg type='*'/>
<retval type='*'/>
</function>
<function name='rb_econv_binmode'>
<arg type='^{rb_econv_t=}'/>
</function>
<function name='rb_econv_check_error'>
<arg type='^{rb_econv_t=}'/>
</function>
<function name='rb_econv_close'>
<arg type='^{rb_econv_t=}'/>
</function>
<function name='rb_econv_convert'>
<arg type='^{rb_econv_t=}'/>
<arg type='^*'/>
<arg type='*'/>
<arg type='^*'/>
<arg type='*'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_econv_decorate_at_first'>
<arg type='^{rb_econv_t=}'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_econv_decorate_at_last'>
<arg type='^{rb_econv_t=}'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_econv_encoding_to_insert_output'>
<arg type='^{rb_econv_t=}'/>
<retval type='*'/>
</function>
<function name='rb_econv_has_convpath_p'>
<arg type='*'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_econv_insert_output'>
<arg type='^{rb_econv_t=}'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_econv_make_exception'>
<arg type='^{rb_econv_t=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_econv_open'>
<arg type='*'/>
<arg type='*'/>
<arg type='i'/>
<retval type='^{rb_econv_t=}'/>
</function>
<function name='rb_econv_open_exc'>
<arg type='*'/>
<arg type='*'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_econv_open_opts'>
<arg type='*'/>
<arg type='*'/>
<arg type='i'/>
<arg type='L' type64='Q'/>
<retval type='^{rb_econv_t=}'/>
</function>
<function name='rb_econv_prepare_options'>
<arg type='L' type64='Q'/>
<arg type='^I' type64='^Q'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_econv_prepare_opts'>
<arg type='L' type64='Q'/>
<arg type='^I' type64='^Q'/>
<retval type='i'/>
</function>
<function name='rb_econv_putback'>
<arg type='^{rb_econv_t=}'/>
<arg type='*'/>
<arg type='i'/>
</function>
<function name='rb_econv_putbackable'>
<arg type='^{rb_econv_t=}'/>
<retval type='i'/>
</function>
<function name='rb_econv_set_replacement'>
<arg type='^{rb_econv_t=}'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_econv_str_append'>
<arg type='^{rb_econv_t=}'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_econv_str_convert'>
<arg type='^{rb_econv_t=}'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_econv_substr_append'>
<arg type='^{rb_econv_t=}'/>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<arg type='l' type64='q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_econv_substr_convert'>
<arg type='^{rb_econv_t=}'/>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<arg type='l' type64='q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enc_ascget'>
<arg type='*'/>
<arg type='*'/>
<arg type='^i'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_associate'>
<arg type='L' type64='Q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enc_associate_index'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enc_casefold'>
<arg type='*'/>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_check'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_enc_codelen'>
<arg type='i'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_codepoint'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='I'/>
</function>
<function name='rb_enc_codepoint_len'>
<arg type='*'/>
<arg type='*'/>
<arg type='^i'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='I'/>
</function>
<function name='rb_enc_compatible'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_enc_copy'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_enc_default_external'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enc_default_internal'>
<retval type='L' type64='Q'/>
</function>
<function inline='true' name='rb_enc_dummy_p'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_fast_mbclen'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_find'>
<arg type='*'/>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_enc_find_index'>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_enc_from_encoding'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enc_from_index'>
<arg type='i'/>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_enc_get'>
<arg type='L' type64='Q'/>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_enc_get_index'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_enc_mbclen'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_nth'>
<arg type='*'/>
<arg type='*'/>
<arg type='l' type64='q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='*'/>
</function>
<function name='rb_enc_path_end'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='*'/>
</function>
<function name='rb_enc_path_last_separator'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='*'/>
</function>
<function name='rb_enc_path_next'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='*'/>
</function>
<function name='rb_enc_path_skip_prefix'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='*'/>
</function>
<function name='rb_enc_precise_mbclen'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_raise' variadic='true'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='L' type64='Q'/>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_enc_reg_new'>
<arg type='*'/>
<arg type='l' type64='q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enc_replicate'>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_set_default_external'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_enc_set_default_internal'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_enc_set_index'>
<arg type='L' type64='Q'/>
<arg type='i'/>
</function>
<function name='rb_enc_sprintf' variadic='true'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg printf_format='true' type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enc_str_asciionly_p'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_enc_str_buf_cat'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='l' type64='q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enc_str_coderange'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_enc_str_new'>
<arg type='*'/>
<arg type='l' type64='q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enc_strlen'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_enc_symname2_p'>
<arg type='*'/>
<arg type='l' type64='q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_symname_p'>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_tolower'>
<arg type='i'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_toupper'>
<arg type='i'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_uint_chr'>
<arg type='I'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enc_unicode_p'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='i'/>
</function>
<function name='rb_enc_vsprintf'>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='*'/>
<arg type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ensure'>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enum_values_pack'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enumeratorize'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_enumeratorize_with_size'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<retval type='L' type64='Q'/>
</function>
<function name='rb_env_clear'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_env_path_tainted'>
<retval type='i'/>
</function>
<function name='rb_eof_error'/>
<function name='rb_eql'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_equal'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_errinfo'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_error_arity'>
<arg type='i'/>
<arg type='i'/>
<arg type='i'/>
</function>
<function name='rb_error_frozen'>
<arg type='*'/>
</function>
<function name='rb_error_untrusted'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_eval_cmd'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_eval_string'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_eval_string_protect'>
<arg type='*'/>
<arg type='^i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_eval_string_wrap'>
<arg type='*'/>
<arg type='^i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_exc_fatal'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_exc_new'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_exc_new2'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_exc_new3'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_exc_raise'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_exec'>
<arg type='^{rb_exec_arg=I}' type64='^{rb_exec_arg=Q}'/>
<retval type='i'/>
</function>
<function name='rb_exec_arg_addopt'>
<arg type='^{rb_exec_arg=I}' type64='^{rb_exec_arg=Q}'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_exec_arg_fixup'>
<arg type='^{rb_exec_arg=I}' type64='^{rb_exec_arg=Q}'/>
</function>
<function name='rb_exec_arg_init'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='i'/>
<arg type='^{rb_exec_arg=I}' type64='^{rb_exec_arg=Q}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_exec_end_proc'/>
<function name='rb_exec_err'>
<arg type='^{rb_exec_arg=I}' type64='^{rb_exec_arg=Q}'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_exec_recursive'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_exec_recursive_outer'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_exec_recursive_paired'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_exec_recursive_paired_outer'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_exit'>
<arg type='i'/>
</function>
<function name='rb_extend_object'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_external_str_new'>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_external_str_new_cstr'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_external_str_new_with_enc'>
<arg type='*'/>
<arg type='l' type64='q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_abort'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_exec'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_exit'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_global_variables'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_kill'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_lambda'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_notimplement'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_require'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_sprintf'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_trace_var'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_f_untrace_var'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_fatal' variadic='true'>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_fd_clr'>
<arg type='i'/>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
</function>
<function name='rb_fd_copy'>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
<arg type='^{fd_set=[32i]}'/>
<arg type='i'/>
</function>
<function name='rb_fd_dup'>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
</function>
<function name='rb_fd_fix_cloexec'>
<arg type='i'/>
</function>
<function name='rb_fd_init'>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
</function>
<function name='rb_fd_isset'>
<arg type='i'/>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
<retval type='i'/>
</function>
<function name='rb_fd_select'>
<arg type='i'/>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
<arg type='^{timeval=ii}' type64='^{timeval=qi}'/>
<retval type='i'/>
</function>
<function name='rb_fd_set'>
<arg type='i'/>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
</function>
<function name='rb_fd_term'>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
</function>
<function name='rb_fd_zero'>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
</function>
<function name='rb_fdopen'>
<arg type='i'/>
<arg type='*'/>
<retval type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='rb_feature_provided'>
<arg type='*'/>
<arg type='^*'/>
<retval type='i'/>
</function>
<function name='rb_fiber_alive_p'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_fiber_current'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_fiber_new'>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_fiber_resume'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_fiber_yield'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_file_absolute_path'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_file_directory_p'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_file_dirname'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_file_expand_path'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_file_open'>
<arg type='*'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_file_open_str'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_file_s_absolute_path'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_file_s_expand_path'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_filesystem_encindex'>
<retval type='i'/>
</function>
<function name='rb_filesystem_encoding'>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_filesystem_str_new'>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_filesystem_str_new_cstr'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_find_encoding'>
<arg type='L' type64='Q'/>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_find_file'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_find_file_ext'>
<arg type='^I' type64='^Q'/>
<arg type='^*'/>
<retval type='i'/>
</function>
<function name='rb_find_file_ext_safe'>
<arg type='^I' type64='^Q'/>
<arg type='^*'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_find_file_safe'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_fix2int'>
<arg type64='Q'/>
<retval type64='q'/>
</function>
<function name='rb_fix2short'>
<arg type='L' type64='Q'/>
<retval type='s'/>
</function>
<function name='rb_fix2str'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_fix2uint'>
<arg type64='Q'/>
<retval type64='Q'/>
</function>
<function name='rb_fix2ushort'>
<arg type='L' type64='Q'/>
<retval type='S'/>
</function>
<function inline='true' name='rb_float_new'>
<arg type='d'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_float_new_in_heap'>
<arg type='d'/>
<retval type='L' type64='Q'/>
</function>
<function inline='true' name='rb_float_value'>
<arg type='L' type64='Q'/>
<retval type='d'/>
</function>
<function name='rb_fork'>
<arg type='^i'/>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='i'/>
</arg>
<arg type='^v'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_fork_err'>
<arg type='^i'/>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</arg>
<arg type='^v'/>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_frame_callee'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_frame_method_id_and_class'>
<arg type='^I' type64='^Q'/>
<arg type='^I' type64='^Q'/>
<retval type='i'/>
</function>
<function name='rb_frame_pop'/>
<function name='rb_frame_this_func'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_free_generic_ivar'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_free_tmp_buffer'>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_frozen_class_p'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_funcall' variadic='true'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_funcall2'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_funcall3'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_funcall_passing_block'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_funcall_with_block'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_gc'/>
<function name='rb_gc_call_finalizer_at_exit'/>
<function name='rb_gc_copy_finalizer'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_gc_disable'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_gc_enable'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_gc_finalize_deferred'/>
<function name='rb_gc_force_recycle'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_gc_mark'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_gc_mark_locations'>
<arg type='^I' type64='^Q'/>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_gc_mark_maybe'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_gc_register_address'>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_gc_register_mark_object'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_gc_set_params'/>
<function name='rb_gc_start'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_gc_unregister_address'>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_generic_ivar_table'>
<arg type='L' type64='Q'/>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='rb_genrand_int32'>
<retval type='I'/>
</function>
<function name='rb_genrand_real'>
<retval type='d'/>
</function>
<function name='rb_genrand_ulong_limited'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_get_alloc_func'>
<arg type='L' type64='Q'/>
<retval function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</retval>
</function>
<function name='rb_get_argv'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_get_path'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_get_path_no_checksafe'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_get_values_at'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</arg>
<retval type='L' type64='Q'/>
</function>
<function name='rb_gets'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_glob'>
<arg type='*'/>
<arg function_pointer='true' type='^?'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<retval type='v'/>
</arg>
<arg type='L' type64='Q'/>
</function>
<function name='rb_global_variable'>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_gv_get'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_gv_set'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_gvar_readonly_setter'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg type='^{rb_global_variable=}'/>
</function>
<function name='rb_gvar_undef_getter'>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg type='^{rb_global_variable=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_gvar_undef_marker'>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_gvar_undef_setter'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg type='^{rb_global_variable=}'/>
</function>
<function name='rb_gvar_val_getter'>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg type='^{rb_global_variable=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_gvar_val_marker'>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_gvar_val_setter'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg type='^{rb_global_variable=}'/>
</function>
<function name='rb_gvar_var_getter'>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg type='^{rb_global_variable=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_gvar_var_marker'>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_gvar_var_setter'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg type='^{rb_global_variable=}'/>
</function>
<function name='rb_hash'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_aref'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_aset'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_clear'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_delete'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_delete_if'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_dup'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_end'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_fetch'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_foreach'>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<retval type='i'/>
</arg>
<arg type='L' type64='Q'/>
</function>
<function name='rb_hash_freeze'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_lookup'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_lookup2'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_new'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_start'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_tbl'>
<arg type='L' type64='Q'/>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='rb_hash_uint'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_uint32'>
<arg type='L' type64='Q'/>
<arg type='I'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_hash_update_by'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</arg>
<retval type='L' type64='Q'/>
</function>
<function name='rb_id2name'>
<arg type='L' type64='Q'/>
<retval type='*'/>
</function>
<function name='rb_id2str'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_id_attrset'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_include_class_new'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_include_module'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_insecure_operation'/>
<function name='rb_inspect'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_int2big'>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_int2inum'>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_intern'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_intern2'>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_intern3'>
<arg type='*'/>
<arg type='l' type64='q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_intern_str'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_interned_id_p'>
<arg type='*'/>
<arg type='l' type64='q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_interrupt'/>
<function name='rb_invalid_str'>
<arg type='*'/>
<arg type='*'/>
</function>
<function name='rb_io_addstr'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_ascii8bit_binmode'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_binmode'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_bufwrite'>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<arg type='L' type64='Q'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_io_check_byte_readable'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
</function>
<function name='rb_io_check_char_readable'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
</function>
<function name='rb_io_check_closed'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
</function>
<function name='rb_io_check_initialized'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
</function>
<function name='rb_io_check_io'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_check_readable'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
</function>
<function name='rb_io_check_writable'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
</function>
<function name='rb_io_close'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_eof'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_extract_encoding_option'>
<arg type='L' type64='Q'/>
<arg type='^^{OnigEncodingTypeST}'/>
<arg type='^^{OnigEncodingTypeST}'/>
<arg type='^i'/>
<retval type='i'/>
</function>
<function name='rb_io_fdopen'>
<arg type='i'/>
<arg type='i'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_flush'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_fptr_finalize'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
<retval type='i'/>
</function>
<function name='rb_io_get_io'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_get_write_io'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_getbyte'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_gets'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_modestr_fmode'>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_io_modestr_oflags'>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_io_oflags_fmode'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_io_print'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_printf'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_puts'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_read_check'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
</function>
<function name='rb_io_read_pending'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
<retval type='i'/>
</function>
<function name='rb_io_set_nonblock'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
</function>
<function name='rb_io_set_write_io'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_stdio_file'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
<retval type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='rb_io_synchronized'>
<arg type='^{rb_io_t=i^{__sFILE}iiiI^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}I{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iI}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}IiIiI}' type64='^{rb_io_t=i^{__sFILE}iiiQ^?{_rb_io_buffer_t=*iii}{_rb_io_buffer_t=*iii}Q{rb_io_enc_t=^{OnigEncodingTypeST}^{OnigEncodingTypeST}iQ}^{rb_econv_t}{_rb_io_buffer_t=*iii}^{rb_econv_t}QiQiQ}'/>
</function>
<function name='rb_io_taint_check'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_ungetbyte'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_ungetc'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_io_wait_readable'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_io_wait_writable'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_io_write'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_is_absolute_path'>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_is_attrset_id'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_is_class_id'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_is_const_id'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_is_global_id'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_is_instance_id'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_is_junk_id'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_is_local_id'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_isalnum'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_isalpha'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_isblank'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_iscntrl'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_isdigit'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_isgraph'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_islower'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_isprint'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_ispunct'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_isspace'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_isupper'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_isxdigit'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_iter_break'/>
<function name='rb_iter_break_value'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_iterate'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_iv_get'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_iv_set'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ivar_count'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ivar_defined'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ivar_foreach'>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<retval type='i'/>
</arg>
<arg type='L' type64='Q'/>
</function>
<function name='rb_ivar_get'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ivar_set'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_jump_tag'>
<arg type='i'/>
</function>
<function name='rb_last_status_get'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_last_status_set'>
<arg type='i'/>
<arg type='i'/>
</function>
<function name='rb_lastline_get'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_lastline_set'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_ll2inum'>
<arg type='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_load'>
<arg type='L' type64='Q'/>
<arg type='i'/>
</function>
<function name='rb_load_file'>
<arg type='*'/>
<retval type='^v'/>
</function>
<function name='rb_load_protect'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^i'/>
</function>
<function name='rb_loaderror' variadic='true'>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_loaderror_with_path' variadic='true'>
<arg type='L' type64='Q'/>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_locale_charmap'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_locale_encindex'>
<retval type='i'/>
</function>
<function name='rb_locale_encoding'>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_locale_str_new'>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_locale_str_new_cstr'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function inline='true' name='rb_long2int_inline'>
<arg type64='q'/>
<retval type64='i'/>
</function>
<function inline='true' name='rb_long2num_inline'>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_make_backtrace'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_make_exception'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_make_metaclass'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mark_hash'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='rb_mark_set'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='rb_mark_tbl'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='rb_marshal_define_compat'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</arg>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</arg>
</function>
<function name='rb_marshal_dump'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_marshal_load'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_match_busy'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_mem_clear'>
<arg type='^I' type64='^Q'/>
<arg type='l' type64='q'/>
</function>
<function name='rb_memcicmp'>
<arg type='^v'/>
<arg type='^v'/>
<arg type='l' type64='q'/>
<retval type='i'/>
</function>
<function name='rb_memerror'/>
<function name='rb_memhash'>
<arg type='^v'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_memsearch'>
<arg type='^v'/>
<arg type='l' type64='q'/>
<arg type='^v'/>
<arg type='l' type64='q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_method_basic_definition_p'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_method_boundp'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_method_call'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_method_call_with_block'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_ancestors'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_class_variables'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_const_at'>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<retval type='^v'/>
</function>
<function name='rb_mod_const_missing'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_const_of'>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<retval type='^v'/>
</function>
<function name='rb_mod_constants'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_include_p'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_included_modules'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_init_copy'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_method_arity'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_mod_module_eval'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_module_exec'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_name'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_remove_const'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_remove_cvar'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mod_sys_fail'>
<arg type='L' type64='Q'/>
<arg type='*'/>
</function>
<function name='rb_mod_sys_fail_str'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_mod_syserr_fail'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='*'/>
</function>
<function name='rb_mod_syserr_fail_str'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_module_new'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_must_asciicompat'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_mutex_lock'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mutex_locked_p'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mutex_new'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mutex_sleep'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mutex_synchronize'>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mutex_trylock'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_mutex_unlock'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_name_class'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_name_error' variadic='true'>
<arg type='L' type64='Q'/>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_name_error_str' variadic='true'>
<arg type='L' type64='Q'/>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_need_block'/>
<function name='rb_newobj'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_newobj_of'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_notimplement'/>
<function inline='true' name='rb_num2char_inline'>
<arg type='L' type64='Q'/>
<retval type='c'/>
</function>
<function name='rb_num2dbl'>
<arg type='L' type64='Q'/>
<retval type='d'/>
</function>
<function name='rb_num2fix'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_num2int'>
<arg type64='Q'/>
<retval type64='q'/>
</function>
<function inline='true' name='rb_num2int_inline'>
<arg type64='Q'/>
<retval type64='i'/>
</function>
<function name='rb_num2ll'>
<arg type='L' type64='Q'/>
<retval type='q'/>
</function>
<function inline='true' name='rb_num2ll_inline'>
<arg type='L' type64='Q'/>
<retval type='q'/>
</function>
<function name='rb_num2long'>
<arg type='L' type64='Q'/>
<retval type='l' type64='q'/>
</function>
<function inline='true' name='rb_num2long_inline'>
<arg type='L' type64='Q'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_num2short'>
<arg type='L' type64='Q'/>
<retval type='s'/>
</function>
<function inline='true' name='rb_num2short_inline'>
<arg type='L' type64='Q'/>
<retval type='s'/>
</function>
<function name='rb_num2uint'>
<arg type64='Q'/>
<retval type64='Q'/>
</function>
<function name='rb_num2ull'>
<arg type='L' type64='Q'/>
<retval type='Q'/>
</function>
<function name='rb_num2ulong'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function inline='true' name='rb_num2ulong_inline'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_num2ushort'>
<arg type='L' type64='Q'/>
<retval type='S'/>
</function>
<function name='rb_num_coerce_bin'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_num_coerce_bit'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_num_coerce_cmp'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_num_coerce_relop'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_num_zerodiv'/>
<function name='rb_obj_alloc'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_as_string'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_call_init'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_obj_class'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_classname'>
<arg type='L' type64='Q'/>
<retval type='*'/>
</function>
<function name='rb_obj_clone'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_dup'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_encoding'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_freeze'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_frozen_p'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_id'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_infect'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_obj_init_copy'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_instance_eval'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_instance_exec'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_instance_variables'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_is_instance_of'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_is_kind_of'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_is_method'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_is_proc'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_method'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_method_arity'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_obj_remove_instance_variable'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_respond_to'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_obj_singleton_methods'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_taint'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_tainted'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_trust'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_untaint'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_untrust'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_obj_untrusted'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_out_of_int'>
<arg type64='q'/>
<retval type64='v'/>
</function>
<function name='rb_p'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_path2class'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_path_check'>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_path_to_class'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_pipe'>
<arg type='^i'/>
<retval type='i'/>
</function>
<function name='rb_prepend_module'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_proc_arity'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_proc_call'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_proc_call_with_block'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_proc_exec'>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_proc_exec_n'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_proc_lambda_p'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_proc_new'>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_proc_times'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_protect'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<arg type='^i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_provide'>
<arg type='*'/>
</function>
<function name='rb_provided'>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_quad_pack'>
<arg type='*'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_quad_unpack'>
<arg type='*'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_raise' variadic='true'>
<arg type='L' type64='Q'/>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_random_bytes'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_random_int'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_random_int32'>
<arg type='L' type64='Q'/>
<retval type='I'/>
</function>
<function name='rb_random_real'>
<arg type='L' type64='Q'/>
<retval type='d'/>
</function>
<function name='rb_random_ulong_limited'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_range_beg_len'>
<arg type='L' type64='Q'/>
<arg type='^l' type64='^q'/>
<arg type='^l' type64='^q'/>
<arg type='l' type64='q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_range_new'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_range_values'>
<arg type='L' type64='Q'/>
<arg type='^I' type64='^Q'/>
<arg type='^I' type64='^Q'/>
<arg type='^i'/>
<retval type='i'/>
</function>
<function name='rb_rational_new'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_rational_raw'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_read_check'>
<arg type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='rb_reg_adjust_startpos'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<arg type='i'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_reg_alloc'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_backref_number'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_reg_init_str'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_last_match'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_match'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_match2'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_match_last'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_match_post'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_match_pre'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_new'>
<arg type='*'/>
<arg type='l' type64='q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_new_str'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_nth_defined'>
<arg type='i'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_nth_match'>
<arg type='i'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_options'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_reg_prepare_re'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='^{re_pattern_buffer=*IIiiiiiiIIIii^{_OnigRepeatRange=ii}^{OnigEncodingTypeST}I^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}I^viiiIIi**[256C]^i^iII^{re_pattern_buffer}}' type64='^{re_pattern_buffer=*IIiiiiiiIIIii^{_OnigRepeatRange=ii}^{OnigEncodingTypeST}I^{_OnigSyntaxType=IIII{_OnigMetaCharTableType=IIIIII}}I^viiiQQi**[256C]^i^iQQ^{re_pattern_buffer}}'/>
</function>
<function name='rb_reg_quote'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_regcomp'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_regsub'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='^{re_registers=ii^i^i^{OnigCaptureTreeNodeStruct}}' type64='^{re_registers=ii^q^q^{OnigCaptureTreeNodeStruct}}'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reg_search'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<arg type='i'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_remove_event_hook'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='v'/>
</arg>
<retval type='i'/>
</function>
<function name='rb_remove_event_hook_with_data'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='v'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_remove_method'>
<arg type='L' type64='Q'/>
<arg type='*'/>
</function>
<function name='rb_remove_method_id'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_require'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_require_safe'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_rescue'>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_rescue2' variadic='true'>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_reserved_fd_p'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_reset_random_seed'/>
<function name='rb_respond_to'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_ruby_debug_ptr'>
<retval type='^I' type64='^Q'/>
</function>
<function name='rb_ruby_verbose_ptr'>
<retval type='^I' type64='^Q'/>
</function>
<function name='rb_run_exec_options'>
<arg type='^{rb_exec_arg=I}' type64='^{rb_exec_arg=Q}'/>
<arg type='^{rb_exec_arg=I}' type64='^{rb_exec_arg=Q}'/>
<retval type='i'/>
</function>
<function name='rb_run_exec_options_err'>
<arg type='^{rb_exec_arg=I}' type64='^{rb_exec_arg=Q}'/>
<arg type='^{rb_exec_arg=I}' type64='^{rb_exec_arg=Q}'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_safe_level'>
<retval type='i'/>
</function>
<function name='rb_scan_args' variadic='true'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_secure'>
<arg type='i'/>
</function>
<function name='rb_secure_update'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_set_class_path'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='*'/>
</function>
<function name='rb_set_class_path_string'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_set_end_proc'>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<retval type='v'/>
</arg>
<arg type='L' type64='Q'/>
</function>
<function name='rb_set_errinfo'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_set_safe_level'>
<arg type='i'/>
</function>
<function name='rb_set_safe_level_force'>
<arg type='i'/>
</function>
<function name='rb_singleton_class'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_singleton_class_attached'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_singleton_class_clone'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_sourcefile'>
<retval type='*'/>
</function>
<function name='rb_sourceline'>
<retval type='i'/>
</function>
<function name='rb_spawn'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='i'/>
</function>
<function name='rb_spawn_err'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_sprintf' variadic='true'>
<arg printf_format='true' type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str2inum'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_append'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_associate'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_str_associated'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_buf_append'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_buf_cat'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_buf_cat2'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_buf_cat_ascii'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_buf_new'>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_buf_new2'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_buf_new_cstr'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_capacity'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_cat'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_cat2'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_catf' variadic='true'>
<arg type='L' type64='Q'/>
<arg printf_format='true' type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_cmp'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_str_coderange_scan_restartable'>
<arg type='*'/>
<arg type='*'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='^i'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_str_comparable'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_str_concat'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_conv_enc'>
<arg type='L' type64='Q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_conv_enc_opts'>
<arg type='L' type64='Q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<arg type='i'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_drop_bytes'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_dump'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_dup'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_dup_frozen'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_ellipsize'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_encode'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_encode_ospath'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_equal'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_export'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_export_locale'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_export_to_enc'>
<arg type='L' type64='Q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_format'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_free'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_str_freeze'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_hash'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_hash_cmp'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_str_inspect'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_intern'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_length'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_locktmp'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_modify'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_str_modify_expand'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
</function>
<function name='rb_str_new'>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_new2'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_new3'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_new4'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_new5'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_new_cstr'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_new_frozen'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_new_shared'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_new_with_class'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_offset'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_str_plus'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_replace'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_resize'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_resurrect'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_set_len'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
</function>
<function name='rb_str_setter'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='^I' type64='^Q'/>
</function>
<function name='rb_str_shared_replace'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_str_split'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_strlen'>
<arg type='L' type64='Q'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_str_sublen'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<retval type='l' type64='q'/>
</function>
<function name='rb_str_subseq'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_substr'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_succ'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_times'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_tmp_new'>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_to_dbl'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='d'/>
</function>
<function name='rb_str_to_inum'>
<arg type='L' type64='Q'/>
<arg type='i'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_to_str'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_unlocktmp'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_str_update'>
<arg type='L' type64='Q'/>
<arg type='l' type64='q'/>
<arg type='l' type64='q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_str_vcatf'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_string_value'>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_string_value_cstr'>
<arg type='^I' type64='^Q'/>
<retval type='*'/>
</function>
<function name='rb_string_value_ptr'>
<arg type='^I' type64='^Q'/>
<retval type='*'/>
</function>
<function name='rb_struct_alloc'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_alloc_noinit'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_aref'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_aset'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_define' variadic='true'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_define_without_accessor' variadic='true'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</arg>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_getmember'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_initialize'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_iv_get'>
<arg type='L' type64='Q'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_members'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_new' variadic='true'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_struct_s_members'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_sym_all_symbols'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_sym_interned_p'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_sym_to_s'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_symname_p'>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='rb_sys_fail'>
<arg type='*'/>
</function>
<function name='rb_sys_fail_str'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_sys_warning' variadic='true'>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_syserr_fail'>
<arg type='i'/>
<arg type='*'/>
</function>
<function name='rb_syserr_fail_str'>
<arg type='i'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_syserr_new'>
<arg type='i'/>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_syserr_new_str'>
<arg type='i'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_syswait'>
<arg type='i'/>
</function>
<function name='rb_tainted_str_new'>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tainted_str_new2'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tainted_str_new_cstr'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_add_event_hook'>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='v'/>
</arg>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_thread_add_event_hook2'>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='v'/>
</arg>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
</function>
<function name='rb_thread_alone'>
<retval type='i'/>
</function>
<function name='rb_thread_atfork'/>
<function name='rb_thread_atfork_before_exec'/>
<function name='rb_thread_blocking_region'>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='L' type64='Q'/>
</arg>
<arg type='^v'/>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='v'/>
</arg>
<arg type='^v'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_call_with_gvl'>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='^v'/>
</arg>
<arg type='^v'/>
<retval type='^v'/>
</function>
<function name='rb_thread_call_without_gvl'>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='^v'/>
</arg>
<arg type='^v'/>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='v'/>
</arg>
<arg type='^v'/>
<retval type='^v'/>
</function>
<function name='rb_thread_call_without_gvl2'>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='^v'/>
</arg>
<arg type='^v'/>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<retval type='v'/>
</arg>
<arg type='^v'/>
<retval type='^v'/>
</function>
<function name='rb_thread_check_ints'/>
<function name='rb_thread_create'>
<arg function_pointer='true' type='^?'>
<retval type='L' type64='Q'/>
</arg>
<arg type='^v'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_current'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_fd_close'>
<arg type='i'/>
</function>
<function name='rb_thread_fd_select'>
<arg type='i'/>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
<arg type='^{_rb_fdset_t=i^{fd_set}}'/>
<arg type='^{timeval=ii}' type64='^{timeval=qi}'/>
<retval type='i'/>
</function>
<function name='rb_thread_fd_writable'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_thread_interrupted'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_thread_kill'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_local_aref'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_local_aset'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_main'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_polling'/>
<function name='rb_thread_remove_event_hook'>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='v'/>
</arg>
<retval type='i'/>
</function>
<function name='rb_thread_remove_event_hook_with_data'>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='v'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_thread_run'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_schedule'/>
<function name='rb_thread_select'>
<arg type='i'/>
<arg type='^{fd_set=[32i]}'/>
<arg type='^{fd_set=[32i]}'/>
<arg type='^{fd_set=[32i]}'/>
<arg type='^{timeval=ii}' type64='^{timeval=qi}'/>
<retval type='i'/>
</function>
<function name='rb_thread_sleep'>
<arg type='i'/>
</function>
<function name='rb_thread_sleep_forever'/>
<function name='rb_thread_stop'>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_wait_fd'>
<arg type='i'/>
</function>
<function name='rb_thread_wait_for'>
<arg type='{timeval=ii}' type64='{timeval=qi}'/>
</function>
<function name='rb_thread_wakeup'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_thread_wakeup_alive'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_throw'>
<arg type='*'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_throw_obj'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_time_interval'>
<arg type='L' type64='Q'/>
<retval type='{timeval=ii}' type64='{timeval=qi}'/>
</function>
<function name='rb_time_nano_new'>
<arg type='l' type64='q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_time_new'>
<arg type='l' type64='q'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_time_num_new'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_time_succ'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_time_timespec'>
<arg type='L' type64='Q'/>
<retval type='{timespec=il}' type64='{timespec=qq}'/>
</function>
<function name='rb_time_timeval'>
<arg type='L' type64='Q'/>
<retval type='{timeval=ii}' type64='{timeval=qi}'/>
</function>
<function name='rb_to_encoding'>
<arg type='L' type64='Q'/>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_to_encoding_index'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_to_float'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_to_id'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_to_int'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tolower'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_toupper'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_tracearg_binding'>
<arg type='^{rb_trace_arg_struct=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracearg_defined_class'>
<arg type='^{rb_trace_arg_struct=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracearg_event'>
<arg type='^{rb_trace_arg_struct=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracearg_from_tracepoint'>
<arg type='L' type64='Q'/>
<retval type='^{rb_trace_arg_struct=}'/>
</function>
<function name='rb_tracearg_lineno'>
<arg type='^{rb_trace_arg_struct=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracearg_method_id'>
<arg type='^{rb_trace_arg_struct=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracearg_path'>
<arg type='^{rb_trace_arg_struct=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracearg_raised_exception'>
<arg type='^{rb_trace_arg_struct=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracearg_return_value'>
<arg type='^{rb_trace_arg_struct=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracearg_self'>
<arg type='^{rb_trace_arg_struct=}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracepoint_disable'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracepoint_enable'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracepoint_enabled_p'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_tracepoint_new'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<retval type='v'/>
</arg>
<arg type='^v'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_trap_exec'/>
<function name='rb_trap_exit'/>
<function inline='true' name='rb_type'>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_typeddata_inherited_p'>
<arg type='^{rb_data_type_struct=*{?=^?^?^?[2^v]}^{rb_data_type_struct}^v}'/>
<arg type='^{rb_data_type_struct=*{?=^?^?^?[2^v]}^{rb_data_type_struct}^v}'/>
<retval type='i'/>
</function>
<function name='rb_typeddata_is_kind_of'>
<arg type='L' type64='Q'/>
<arg type='^{rb_data_type_struct=*{?=^?^?^?[2^v]}^{rb_data_type_struct}^v}'/>
<retval type='i'/>
</function>
<function name='rb_uint2big'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_uint2inum'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_ull2inum'>
<arg type='Q'/>
<retval type='L' type64='Q'/>
</function>
<function inline='true' name='rb_ulong2num_inline'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_undef'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='rb_undef_alloc_func'>
<arg type='L' type64='Q'/>
</function>
<function name='rb_undef_method'>
<arg type='L' type64='Q'/>
<arg type='*'/>
</function>
<function name='rb_update_max_fd'>
<arg type='i'/>
</function>
<function name='rb_usascii_encindex'>
<retval type='i'/>
</function>
<function name='rb_usascii_encoding'>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_usascii_str_new'>
<arg type='*'/>
<arg type='l' type64='q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_usascii_str_new2'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_usascii_str_new_cstr'>
<arg type='*'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_utf8_encindex'>
<retval type='i'/>
</function>
<function name='rb_utf8_encoding'>
<retval type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
</function>
<function name='rb_uv_to_utf8'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='rb_vsprintf'>
<arg type='*'/>
<arg type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_wait_for_single_fd'>
<arg type='i'/>
<arg type='i'/>
<arg type='^{timeval=ii}' type64='^{timeval=qi}'/>
<retval type='i'/>
</function>
<function name='rb_waitpid'>
<arg type='i'/>
<arg type='^i'/>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='rb_warn' variadic='true'>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_warning' variadic='true'>
<arg printf_format='true' type='*'/>
</function>
<function name='rb_write_error'>
<arg type='*'/>
</function>
<function name='rb_write_error2'>
<arg type='*'/>
<arg type='l' type64='q'/>
</function>
<function name='rb_yield'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_yield_splat'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_yield_values' variadic='true'>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='rb_yield_values2'>
<arg type='i'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='ruby_brace_glob'>
<arg type='*'/>
<arg type='i'/>
<arg function_pointer='true' type='^?'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<retval type='i'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='ruby_cleanup'>
<arg type='i'/>
<retval type='i'/>
</function>
<function name='ruby_default_signal'>
<arg type='i'/>
</function>
<function name='ruby_each_words'>
<arg type='*'/>
<arg function_pointer='true' type='^?'>
<arg type='*'/>
<arg type='i'/>
<arg type='^v'/>
<retval type='v'/>
</arg>
<arg type='^v'/>
</function>
<function name='ruby_enc_find_basename'>
<arg type='*'/>
<arg type='^l' type64='^q'/>
<arg type='^l' type64='^q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='*'/>
</function>
<function name='ruby_enc_find_extname'>
<arg type='*'/>
<arg type='^l' type64='^q'/>
<arg type='^{OnigEncodingTypeST=^?*ii^?^?^?^?^?^?^?^?^?^?^?^?iI}'/>
<retval type='*'/>
</function>
<function name='ruby_exec_node'>
<arg type='^v'/>
<retval type='i'/>
</function>
<function name='ruby_executable_node'>
<arg type='^v'/>
<arg type='^i'/>
<retval type='i'/>
</function>
<function name='ruby_finalize'/>
<function name='ruby_getcwd'>
<retval type='*'/>
</function>
<function name='ruby_glob'>
<arg type='*'/>
<arg type='i'/>
<arg function_pointer='true' type='^?'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<arg type='^v'/>
<retval type='i'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='ruby_incpush'>
<arg type='*'/>
</function>
<function name='ruby_init'/>
<function name='ruby_init_loadpath'/>
<function name='ruby_init_stack'>
<arg type='^I' type64='^Q'/>
</function>
<function name='ruby_native_thread_p'>
<retval type='i'/>
</function>
<function name='ruby_options'>
<arg type='i'/>
<arg type='^*'/>
<retval type='^v'/>
</function>
<function name='ruby_posix_signal'>
<arg type='i'/>
<arg function_pointer='true' type='^?'>
<arg type='i'/>
<retval type='v'/>
</arg>
<retval function_pointer='true' type='^?'>
<arg type='i'/>
<retval type='v'/>
</retval>
</function>
<function name='ruby_process_options'>
<arg type='i'/>
<arg type='^*'/>
<retval type='^v'/>
</function>
<function name='ruby_prog_init'/>
<function name='ruby_qsort'>
<arg type='^v'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='^v'/>
<arg type='^v'/>
<arg type='^v'/>
<retval type='i'/>
</arg>
<arg type='^v'/>
</function>
<function name='ruby_run_node'>
<arg type='^v'/>
<retval type='i'/>
</function>
<function name='ruby_scan_hex'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='ruby_scan_oct'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<arg type='^I' type64='^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='ruby_script'>
<arg type='*'/>
</function>
<function name='ruby_set_argv'>
<arg type='i'/>
<arg type='^*'/>
</function>
<function name='ruby_set_script_name'>
<arg type='L' type64='Q'/>
</function>
<function name='ruby_set_stack_size'>
<arg type='L' type64='Q'/>
</function>
<function name='ruby_setenv'>
<arg type='*'/>
<arg type='*'/>
</function>
<function name='ruby_setup'>
<retval type='i'/>
</function>
<function name='ruby_show_copyright'/>
<function name='ruby_show_version'/>
<function name='ruby_sig_finalize'/>
<function name='ruby_signal_name'>
<arg type='i'/>
<retval type='*'/>
</function>
<function name='ruby_snprintf' variadic='true'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<arg printf_format='true' type='*'/>
<retval type='i'/>
</function>
<function name='ruby_stack_check'>
<retval type='i'/>
</function>
<function name='ruby_stack_length'>
<arg type='^^I' type64='^^Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='ruby_stop'>
<arg type='i'/>
</function>
<function name='ruby_strdup'>
<arg type='*'/>
<retval type='*'/>
</function>
<function name='ruby_strtod'>
<arg type='*'/>
<arg type='^*'/>
<retval type='d'/>
</function>
<function name='ruby_strtoul'>
<arg type='*'/>
<arg type='^*'/>
<arg type='i'/>
<retval type='L' type64='Q'/>
</function>
<function name='ruby_sysinit'>
<arg type='^i'/>
<arg type='^^*'/>
</function>
<function name='ruby_unsetenv'>
<arg type='*'/>
</function>
<function name='ruby_vm_at_exit'>
<arg function_pointer='true' type='^?'>
<arg type='^{rb_vm_struct=}'/>
<retval type='v'/>
</arg>
</function>
<function name='ruby_vm_destruct'>
<arg type='^{rb_vm_struct=}'/>
<retval type='i'/>
</function>
<function name='ruby_vsnprintf'>
<arg type='*'/>
<arg type='L' type64='Q'/>
<arg type='*'/>
<arg type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval type='i'/>
</function>
<function name='ruby_xcalloc'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='^v'/>
</function>
<function name='ruby_xfree'>
<arg type='^v'/>
</function>
<function name='ruby_xmalloc'>
<arg type='L' type64='Q'/>
<retval type='^v'/>
</function>
<function name='ruby_xmalloc2'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='^v'/>
</function>
<function name='ruby_xrealloc'>
<arg type='^v'/>
<arg type='L' type64='Q'/>
<retval type='^v'/>
</function>
<function name='ruby_xrealloc2'>
<arg type='^v'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='^v'/>
</function>
<function name='setproctitle' variadic='true'>
<arg type='*'/>
</function>
<function name='st_add_direct'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
</function>
<function name='st_cleanup_safe'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg type='L' type64='Q'/>
</function>
<function name='st_clear'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_copy'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_delete'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg type='^I' type64='^Q'/>
<arg type='^I' type64='^Q'/>
<retval type='i'/>
</function>
<function name='st_delete_safe'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg type='^I' type64='^Q'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='st_foreach'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg function_pointer='true' type='^?'>
<retval type='i'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='st_foreach_check'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg function_pointer='true' type='^?'>
<retval type='i'/>
</arg>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='st_foreach_safe'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg function_pointer='true' type='^?'>
<retval type='i'/>
</arg>
<arg type='L' type64='Q'/>
</function>
<function name='st_free_table'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_get_key'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg type='L' type64='Q'/>
<arg type='^I' type64='^Q'/>
<retval type='i'/>
</function>
<function name='st_hash'>
<arg type='^v'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='st_hash_end'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='st_hash_start'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='st_hash_uint'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='st_hash_uint32'>
<arg type='L' type64='Q'/>
<arg type='I'/>
<retval type='L' type64='Q'/>
</function>
<function name='st_init_numtable'>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_init_numtable_with_size'>
<arg type='L' type64='Q'/>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_init_strcasetable'>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_init_strcasetable_with_size'>
<arg type='L' type64='Q'/>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_init_strtable'>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_init_strtable_with_size'>
<arg type='L' type64='Q'/>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_init_table'>
<arg type='^{st_hash_type=^?^?}'/>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_init_table_with_size'>
<arg type='^{st_hash_type=^?^?}'/>
<arg type='L' type64='Q'/>
<retval type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
</function>
<function name='st_insert'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='st_insert2'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</arg>
<retval type='i'/>
</function>
<function name='st_lookup'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg type='L' type64='Q'/>
<arg type='^I' type64='^Q'/>
<retval type='i'/>
</function>
<function name='st_memsize'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<retval type='L' type64='Q'/>
</function>
<function name='st_numcmp'>
<arg type='L' type64='Q'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='st_numhash'>
<arg type='L' type64='Q'/>
<retval type='L' type64='Q'/>
</function>
<function name='st_reverse_foreach'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg function_pointer='true' type='^?'>
<retval type='i'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='st_strcasecmp'>
<arg type='*'/>
<arg type='*'/>
<retval type='i'/>
</function>
<function name='st_strncasecmp'>
<arg type='*'/>
<arg type='*'/>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function name='st_update'>
<arg type='^{st_table=^{st_hash_type}Ib1b31(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}I})}' type64='^{st_table=^{st_hash_type}Qb1b63(?={?=^^{st_table_entry}^{st_table_entry}^{st_table_entry}}{?=^{st_packed_entry}Q})}'/>
<arg type='L' type64='Q'/>
<arg function_pointer='true' type='^?'>
<arg type='^I' type64='^Q'/>
<arg type='^I' type64='^Q'/>
<arg type='L' type64='Q'/>
<arg type='i'/>
<retval type='i'/>
</arg>
<arg type='L' type64='Q'/>
<retval type='i'/>
</function>
<function_alias name='ONIG_NULL_WARN' original='onig_null_warn'/>
<function_alias name='posix_signal' original='ruby_posix_signal'/>
<function_alias name='rb_memcmp' original='memcmp'/>
<function_alias name='rb_str_buf_new2' original='rb_str_buf_new_cstr'/>
<function_alias name='rb_str_dup_frozen' original='rb_str_new_frozen'/>
<function_alias name='rb_str_new2' original='rb_str_new_cstr'/>
<function_alias name='rb_str_new3' original='rb_str_new_shared'/>
<function_alias name='rb_str_new4' original='rb_str_new_frozen'/>
<function_alias name='rb_str_new5' original='rb_str_new_with_class'/>
<function_alias name='rb_tainted_str_new2' original='rb_tainted_str_new_cstr'/>
<function_alias name='rb_usascii_str_new2' original='rb_usascii_str_new_cstr'/>
<function_alias name='snprintf' original='ruby_snprintf'/>
<function_alias name='vsnprintf' original='ruby_vsnprintf'/>
<function_alias name='xcalloc' original='ruby_xcalloc'/>
<function_alias name='xfree' original='ruby_xfree'/>
<function_alias name='xmalloc' original='ruby_xmalloc'/>
<function_alias name='xmalloc2' original='ruby_xmalloc2'/>
<function_alias name='xrealloc' original='ruby_xrealloc'/>
<function_alias name='xrealloc2' original='ruby_xrealloc2'/>
</signatures>
